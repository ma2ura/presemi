# 記述統計とデータの可視化・視覚化

第5回講義の**到達目標**は、

- 適切なデータの型を選択し，データを読み込むことができる。
- カテゴリー変数を用いて表を作る事が出来る。
- `dplyr`パッケージを駆使して前処理を行い，作図するために必要なデータを作ることができる。
- `ggplot2`パッケージを使って，データの特徴を伝えやすく，シンプルで，美しいグラフを作成することができる。

第5回講義の**到達度検証のための課題**は、以下の通りです。

- 数値，文字列，ファクターを適切に選択したデータを作る。
- カテゴリー変数を用いて，作表する。
- `group_by()`や`summarise()`を使って，作図するためのデータを準備する。
- `ggplot()`で作図する。

ここではRの得意とする**データの可視化**(data visualization)について学びます。
いままで利用してきた`tidyverse`にはグラフ作成のためのパッケージとして`ggplot2`があります。
本章では，`ggplot2`の使い方を学習し，読者にもデータの特徴を伝えやすく，シンプルで，美しいグラフの作成を目指します。

ビッグデータを容易に扱えるようになった昨今において、データの可視化スキルの重要性は高まってきており、以下のような書籍が出版されています。いずれも非常に良い書籍ですので、興味のある方は読んでみてください。

:::{layout-ncol=3}
![データ分析のためのデータ可視化入門](img/R_Visu_01.jpg)

![Rでできるビジュアル統計学](img/R_Visu_02.jpg)

![Rによるインタラクティブなデータビジュアライゼーション](img/R_Visu_03.jpg)
:::

1冊目はアメリカで絶賛された可視化本が翻訳されたものです。ソースコードとともに、データの可視化の基本や実例を学べます。
2冊目は、統計学を可視化という視点で学習する本です。
3冊目は前の2冊とは若干毛色が異なっており、`Shiny`というPosit社が開発したパッケージを使って、インタラクティブなグラフを作成する方法を学べます。

`ggplot2`を使うために`tidyverse`と`ggthemes`と`patchwork`を読み込みます。まだインストールできていなければ，始めにインストールしておいてください。

```{r}
#| eval: false
# install.packages("tidyverse") # first time only
# install.packages("ggthemes")
# install.packages("patchwork")
```

```{r}
library(tidyverse) # とりあえずこれ
library(ggthemes) # ggplotのテーマ拡張
library(patchwork) # ggplotの図を並べる
require(fontregisterer) # 日本語フォントの登録
```
また、Macだとggplot2で作図したグラフで日本語が表示されないことがあります。
そのため、グラフのスタイルを事前に設定しておいて、文字化けを回避します。

```{r}
mystyle <- list ( # mystyleとして設定を保存
  theme_few(), # ggthemesのテーマ
  theme(
    text = element_text(
      size=16,  #  フォントサイズ
     family = "HiraKakuProN-W3" # ヒラギノフォント
    )
  )
)
```

## 変数の種類と記述統計

データには「**カテゴリ変数**」(category variable)と「**量的変数**」(quantitative variable)あるいは「**連続変数**」(continuous variable)があり，それぞれに対して適切なグラフの種類があります。

### カテゴリー変数と量的変数

**カテゴリー変数**(category variable)とは、観測値が属するカテゴリーを表す変数です。
たとえば、日経産業中分類の「水産」は35、鉱業は37，建設は41ですが、これらの数値は足したり引いたりすることに意味はありません。

**量的変数**(quantitative variable)とは、観測値が数値で表される変数です。
たとえば、売上高や株価は金額で表されるため、足したり引いたり、平均や分散を計算することに意味があります。

したがって、手元にあるデータベースの各変数がカテゴリー変数か量的変数かを把握することは極めて重要です。
Rでは自動で両者を区別したりはしてくれないので、データを読み込んだ後に変数の種類を確認し、自分で指定します。

### 練習用データの読み込み {.unnumbered}

ここでは、教科書とは違う、企業の財務データを使いながら、データの可視化を学びます。
財務データが収録された`csv`ファイルを，tidyverseの`read_csv()`関数を使って読み込みます。
`read_csv()`関数の引数として，ファイルの場所とファイル名を直接パスあるいは相対パスを指定します。

```{r}
df <- read_csv("data/RD_2022.csv")
glimpse(df) # データの概要
```

`23`個の変数があり、データの個数は`57,823`となっています。
以下ではこのデータを使って、データの可視化を学びます。

### 基本的な統計量の確認

はじめに`summary()`で基本的な統計量を確認します。

```{r}
summary(df)
```

文字列となっている変数以外の量的変数については、最小値、第1四分位、中央値、平均値、第3四分位、最大値、欠損値の数、といった項目が計算されています。
数値データのうち、カテゴリー変数の統計量については意味が無いです。

23個の変数の型を確認すると、大部分の財務データは数値`<dbl>`ですが、

- 会社コード
- 企業名
- 決算期

の3つは文字列`<chr>`となっています。
また、数値となっているけれど、実際はカテゴリー変数であるものとして、

- 決算種別 : `10 = 本決算`
- 連結基準 : `1 = 日本基準`, `2 = 米国基準`, `3 = IFRS`, `0 = 単独`
- 上場コード : `11 = 東証1部`, `12 = 東証2部`, `13 = 東証マザーズ`,
- 日経業種コード : 後で説明あり

があります。
文字列となっている変数以外の量的変数については、最小値、第1四分位、中央値、平均値、第3四分位、最大値、欠損値の数、といった項目が計算されています。
数値データとなっているカテゴリー変数である決算種別，連結基準，上場コード，日経業種コードの統計量も計算されていますが，もちろん意味は無いので，Rにカテゴリー変数であることを明示するためにファクター型に変換する必要があります。

とりあえず、数値データのうち、カテゴリー変数ではないものについて、統計量を計算してみます。
主要な統計量を返す関数には以下のものがあります。

- `mean()` : 算術平均を計算する
- `median()` : 中央値を計算する
- `sd()` : (不偏)標準偏差を計算する
- `var()` : (不偏)分散を計算する
- `min()` : 最小値を計算する
- `max()` : 最大値を計算する

では、売上高の平均を計算してみましょう。
データフレーム`df`の売上高にアクセスするには、`df$売上高`のように、`$`を使って変数名を指定します。
Excelでいうと，`df`がシート名，`売上高`が列名に相当します。

```{r}
mean(df$売上高)
```

`NA`が帰ってきましたね。
実は、この`mean()`関数は、引数となるベクトル変数の中に欠損値`NA`があると、`NA`を返します。
欠損値を意味する`NA`は，その観測値が存在しないことを表します。
このような場合、`NA`を除外して平均を計算する必要があるので、`na.rm = TRUE`という引数を追加します。

```{r}
mean(df$売上高, na.rm = TRUE)
```
これで、売上高の平均が`r round(mean(df$売上高, na.rm = T), digits = 4)`となりました。

同じように、


```{r}
median(df$売上高, na.rm = TRUE) # 中央値
sd(df$売上高, na.rm = TRUE) # 標準偏差
```
とすることで、中央値と標準偏差が求められます。

### カテゴリ変数の内容確認

カテゴリー変数について見ていきましょう。
ここでは日経業種コードを例にとります。
日経業種コードは6ケタの数字ですが、最初の1ケタが大分類、次の2ケタ目が中分類、最後の3ケタ目が小分類を表します。つまり`1 + 32 + 344`のような構造になっています。
実証会計研究では、産業中分類をよく使うので、ここでは中分類を抽出してみましょう。
またしても`substr()`関数を使って、2〜3ケタ目を抽出し、`中分類`という変数に格納します。
ついでに，`決算期`のデータが`YYYY/MM`という形式になっているので，最初の4桁を抽出して，`年度`という変数に格納します。

```{r}
df <- df %>%
  mutate(
    中分類 = substr(日経業種コード, 2, 3), #2〜3ケタ目を抽出
    年度 = substr(決算期, 1, 4) # 最初の4桁を抽出
    )
```

この中分類の内容を確認するには、`table()`関数を使います。

```{r}
table(df$中分類) # 中分類の表
```

このように、中分類ごとの企業数が計算されました。
このカテゴリー変数の型を`class()`関数で確認します。

```{r}
class(df$中分類) # 中分類の型
```
`character`つまり文字列となっています。これをファクター型に変えて、カテゴリー変数であることを明示します。`as.factor()`関数を使うと、ファクター型に変換できますが，産業コードだけだとどの産業なのか分かりづらいままです。
そこで、`factor()`関数を使って、カテゴリー変数の内容を指定します。
ついでに，上場コードや連結基準もファクター型に変換しておきます。

まずどんな中分類があるのかを確認します。
ある変数にどんなカテゴリーがあるのかを確認するには、`unique()`関数を使います。

```{r}
chu_level <- sort(unique(df$中分類)) # 中分類のカテゴリーを抽出
```

この中分類コードに対応する産業名称を指定するには，`factor()`関数の引数として，`levels =`と`labels =`を指定します。
以下では，`mutate()`と組み合わせて，`中分類`をファクター型に変換します。

産業名称をベクトルとして収納しておきます。

```{r}
chu_name <- c(
  "食品","繊維","パルプ・紙","化学工業","医薬品","石油","ゴム","窯業","鉄鉱業","非金属及び金属製品","機械","電気機器","造船","自動車・自動車部品","その他輸送用機器","精密機器","その他製造業","水産","鉱業","建設","商社","小売業","その他金融業","不動産","鉄道・バス","陸運","海運","空輸","倉庫・運輸関連","通信","電力","ガス","サービス業")
```

```{r}
df <- df %>%
  arrange(中分類) %>%
  mutate(
    中分類 = factor( # 中分類をファクター型に変換
      中分類,
      levels = chu_level, # カテゴリーの種類
      labels = chu_name), # カテゴリーの名称
    上場コード = factor(
      上場コード,
      levels = c(11,12,13), # カテゴリーの種類
      labels = c("1部","2部","マザーズ")), # カテゴリーの名称
    連結基準 = factor(
      連結基準,
      levels = c(1,2,3,0),
      labels = c("日本基準","米国基準","IFRS","単独"))
      )
```

カテゴリー変数がファクター型に変換されたので，再度`summary()`関数を使って，概要統計量を確認してみましょう。

```{r}
summary(df)
```

カテゴリー変数はカテゴリーの種類と個数が表示されています。

### 2つのカテゴリー変数の関係を確かめる

2つの変数から表を作成する方法について学びます。
典型的な表として，2変数のクロス集計表があります。
例えば，連結基準，つまり企業が採用している会計基準の種類と，上場コード，つまり企業が上場している市場の種類，の2変数について，それぞれのカテゴリーごとの企業数を計算することができます。

```{r}
table(df$連結基準, df$上場コード)
```

圧倒的に，日本基準で上場している企業が多いことがわかります。
2020年度のデータだけを抽出して，同じようにクロス集計表を作成してみましょう。

```{r}
df %>%
  filter(年度 == 2020) %>%
  with(table(連結基準, 上場コード))
```
東証1部に上場している企業に注目すると，日本基準採用企業が1474社，米国基準採用企業が11社，IFRS採用企業が194社となっていることがわかりました。

このように，`table()`関数の引数として2つのカテゴリー変数を指定すると，そこから$2 \times 2$のグループに属する企業数を計算し，表を作成してくれます。

ここで急に登場した`with()`関数ですが，`with()`関数は主として次の2つの引数をとります。

1. データ
2. 式

例えば，先の表を作る場合を考えてみましょう。
普通に書くと

```{r}
#| eval: false
table(df$連結基準, df$上場コード)
```
とかきましたが，何度も`df$`を書くことが面倒なので，`with()`関数を使って

```{r}
#| eval: false
with(df, table(連結基準, 上場コード))
```

と，第1引数に`df`を指定すれば，第2引数の式の中で`df$`を書く必要がなくなります。したがって，パイプ演算子を使って，

```{r}
#| eval: false
df %>% with(table(連結基準, 上場コード))
```
と処理をつなげることができます。
便利ですね。

### カテゴリー別に量的変数の値を調べる

次は，量的変数をカテゴリーごとに分析したいときがあります。
たとえば，産業別や年度別に売上高の平均値を知りたい，ということが何度もあります。
任意のグループごとに処理を繰り返したいときは，`dplyr`パッケージの`group_by()`関数を使います。
`group_by()`関数は，第1引数にグループ化したい変数を指定します。

そして`group_by()`関数と同時に使うことで，グループごとの統計量を計算するために便利なのが`dplyr`パッケージの`summarize()`関数です。
`summarize()`関数は，次のような引数をとり，各種統計量を計算してくれます。

- `mean =` : 平均
- `median =`  : 中央値
- `sd =` : 標準偏差
- `var =` : 分散
- `n()` : グループごとの観測値の個数

例えば，上場場所ごとに売上高の平均値を計算するには，次のようにします。

```{r}
df %>%
  group_by(上場コード) %>% # 上場場ごとに
  summarize(
    企業数 = n(), #
    平均売上高 = mean(売上高, na.rm = TRUE) # 平均
    ) %>%
  ungroup() %>% # グループ化解除
  knitr::kable(booktabs = TRUE) # 表を作成
```

結果を見れば分かるとおり，`group_by()`で上場場所ごとにグループ化し，`summarize()`で企業数と平均売上高を計算しているので，上場場所，企業数，平均売上高の3変数が3つの観測値をもつ$3 \times 3$の表が作成されています。
`group_by()`と`summarize()`を組み合わせると，結果としてグループ数に応じた統計量を計算した結果となり，元のデータよりも小さなデータフレームとなって返ってきます。

ついでに，産業別の売上高合計，利益平均値，利益中央値，利益の標準偏差を計算してみましょう。

```{r}
df %>%
  group_by(中分類) %>% # 産業中分類ごとに
  summarize(
    企業数 = n(), # n()で要素数
    売上合計 = sum(売上高, na.rm = TRUE), # 合計
    利益平均値 = mean(親会社株主に帰属する当期純利益, na.rm = TRUE), # 平均
    利益中央値 = median(親会社株主に帰属する当期純利益, na.rm = TRUE), # 中央値
    利益標準偏差 = sd(親会社株主に帰属する当期純利益, na.rm = TRUE) # 標準偏差
    ) %>%
  arrange(desc(売上合計)) %>% # 売上合計で降順に並び替え
  ungroup() %>% # グループ化解除
  knitr::kable(booktabs = TRUE) # 表を作成
```


次のグラフ作成のためのデータを作成するため，年度別ごとに，ROEの平均値を計算し，その結果を`df_year`という変数に代入します。
ROEは，ある年度の`親会社に帰属する当期純利益`を期首株主資本で割った値です。
株主資本は，資本金と資本剰余金，利益剰余金，自己株式の合計で計算しますが，欠損値になっている会社もあるので，`replace_na()`関数を使って欠損値にはゼロを代入します。

```{r}
df <- df %>%
  replace_na(list(資本剰余金 = 0, 利益剰余金 = 0, 自己株式 = 0)) %>% # 欠損値をゼロに置き換え
  group_by(企業名) %>% # 会社ごとに
  mutate( # 新変数作成
    株主資本 = 資本金 + 資本剰余金 + 利益剰余金 + 自己株式, # 株主資本を計算
    ) %>%
    filter(株主資本 >0 ) %>% # 株主資本がマイナスの企業を除外
  mutate(
    ROE = 親会社株主に帰属する当期純利益 / lag(株主資本) # ROEを計算
    ) %>%
  ungroup() # グループ化解除

df_year <- df %>%
  group_by(年度) %>% # 年ごとに
  summarize( # 統計量を計算
    平均ROE = mean(ROE, na.rm = TRUE)
    ) %>%
  ungroup() # グループ化解除
```

これで，年度ごと，上場場所ごとに，平均ROEを計算したデータフレーム`df_year`ができました。

ここで注意しなければならない点として，`group_by(企業名)`とした上で，`lag()`関数を使っている点です。
`lag()`関数は，引数として指定した変数の値の1つ前の値に変換します。
したがって，`group_by()`を使わないと次のような結果になります。

```{r}
#| echo: false
df_1 <- df %>%
  replace_na(list(資本剰余金 = 0, 利益剰余金 = 0, 自己株式 = 0)) %>%
  mutate(
    株主資本 = 資本金 + 資本剰余金 + 利益剰余金 + 自己株式, # 株主資本を計算
    ROE = 親会社株主に帰属する当期純利益 / lag(株主資本) # ROEを計算
    ) %>%
  select(企業名, 年度,親会社株主に帰属する当期純利益, 株主資本, ROE)
knitr::kable(head(df_1[22:27, ]))
```

ここで問題になっているのが，日清製粉グループ本社の1999年のROEが計算されている点である。
ROEは分子に親会社株主に帰属する当期純利益，分母に**期首**株主資本，つまりは前期末の株主資本を使います。
したがって，1999年のROEを計算するためには，1998年の株主資本を使う必要がありますが，データは1999年からしか存在しないので欠損値にならないといけないのに，計算されてしまっています。
つまり，一つ上のニップンの2022年の株主資本のデータを使っているのです。
そこで，`group_by()`により企業ごとにグループ化して，`lag()`関数を使って，一つ前の観測値を使うようにし，1999年のROEは欠損値になるようにします。

```{r}
#| echo: false
df_2 <- df %>%
  replace_na(list(資本剰余金 = 0, 利益剰余金 = 0, 自己株式 = 0)) %>%
  group_by(企業名) %>% # 会社ごとに
  mutate(
    株主資本 = 資本金 + 資本剰余金 + 利益剰余金 + 自己株式, # 株主資本を計算
    ROE = 親会社株主に帰属する当期純利益 / lag(株主資本) # ROEを計算
    ) %>%
  select(企業名, 年度, 株主資本, ROE) %>%
  ungroup()
knitr::kable(head(df_2[22:27, ]))
```
## 変数の可視化・視覚化

カテゴリー変数のファクター化，`with()`関数と`table()`関数を使ったクロス集計表の作成，`group_by()`関数と`summarize()`関数を使ったグループごとの統計量の計算について学んだので，これらの結果を使ってグラフを作ることで，読者に伝わるデータの可視化を行いたいと思います。
キレイなグラフを比較的簡単に作ることができる`ggplot2`パッケージを使います。

### `ggplot()`関数の基本的な使い方と変数の特徴把握

`ggplot2`パッケージの`ggplot()`関数は，次のような引数をとります。

- `data =` : データフレーム
- `mapping = aes()` : グラフの構成要素を指定する関数
- `geom_***` : グラフの種類を指定する関数
- 各種オプション

最初の注意点として，`ggplot()`関数は，第1引数`data =`で`tibble`か`data.frame`を指定する必要があります。
データの型に気をつけましょう。


では，年度ごとに平均ROEを示した折れ線グラフを作図していきます。
まず土台となるデータフレームを指定します。


```{r}
ggplot(data = df_year)
```

土台ができましたが，まだ何も表示されていません。
次に，グラフの構成要素を指定するために，`mapping = aes()`で，軸を指定します。
今回は，横軸に年度，縦軸に平均ROEを指定します。

```{r}
ggplot(data = df_year, mapping = aes(x = 年度, y = 平均ROE))
```
縦軸と横軸が表示されました。
軸のラベルが文字化けしているので，最初に作成しておいたスタイル`mystyle`を適用します。
```{r}
ggplot(data = df_year, mapping = aes(x = 年度, y = 平均ROE)) + mystyle
```
次に，グラフを作成するために，`geom_line()`関数を使います。
`ggplot`関数では，次のような`geom_***()`関数を使って，グラフの種類を指定します。

- `geom_point()` : 散布図
- `geom_line()` : 折れ線グラフ
- `geom_bar()` : 棒グラフ
- `geom_boxplot()` : 箱ひげ図
- `geom_histogram()` : ヒストグラム
- `geom_density()` : カーネル密度推定図
- `geom_violin()` : バイオリンプロット
- `geom_smooth()` : 平滑化曲線

ここでは横軸が`年度`という文字列，縦軸が`平均ROE`という量的変数となるグラフを作るので，`geom_bar()`を使います。


```{r}
ggplot(data = df_year, mapping = aes(x = 年度, y = 平均ROE)) +
  geom_bar(stat = "identity") + mystyle
```

横軸が順序に意味のある変数であれば，`geom_line()`で折れ線グラフを作るほうが良いでしょう。
この場合，`年度`は文字列ですが，本来は順序に意味のあるカテゴリー変数ですので，`factor()`関数を使って，ファクター型に変換します。

```{r}
df_year <- df_year %>%
  mutate(年度f = factor(年度,
  levels = c(1999:2022),
  ordered = TRUE))
```

横軸が順序付きのファクターの`年度f`となったので，`geom_line()`を使って折れ線グラフを作成します。
ここで，オプションとして，`group = 1`を指定して，データ全体が1つのグループであることを明示します。
横軸がファクター型であるときは，`group = 1`をつける，というおまじないを覚えておきましょう。

```{r}
ggplot(data = df_year, mapping = aes(x = 年度f, y = 平均ROE, group = 1)) +
  geom_line() + geom_point() + xlab("年度") + ylab("平均ROE") + mystyle
```

上のコードは，必要な引数を省略せずに書きましたが，省略できるものを省略しつつ，
すべての要素を$+$でつなぐよりも，レイヤーごとに代入していくほうが，コードが読みやすくなります。

```{r}
g <- ggplot(df_year) + aes(年度f, 平均ROE, group = 1) # 基本要素
g <- g + geom_line() + geom_point() # 折れ線グラフと散布図
g <- g + xlab("年度") + ylab("平均ROE") + mystyle # 見た目の調整
print(g)
```

### ヒストグラム

次に，前年度のROEのヒストグラムを作成してみましょう。


```{r}
g <- ggplot(df) +
  aes(ROE) + # 1変数 ROE を指定
  geom_histogram(fill="skyblue", color = "black") + # ヒストグラム
  xlim(-1,1) + mystyle # x軸の範囲とスタイルを指定
print(g)
```

### 箱ひげ図とバイオリンプロット

次に，上場場所別ROEの分布を箱ひげ図とバイオリンプロットで比較してみましょう。
箱ひげ図は，`geom_boxplot()`を使います。

```{r}
g <- ggplot(df) + aes(x = factor(上場コード), y = ROE) + geom_boxplot() + mystyle
print(g)
```

ROEのばらつきが大きく，極端にROEが大きかったり小さかったりする異常値のせいで，箱ひげ図がうまく描写されていません。
そこで異常値を除外するため，ROEの範囲を$[-0.5,0.5]$に限定してみましょう。
先ほど箱ひげ図を作成するために作ったオブジェクト`g`に`ylim()`を追加して，Y軸の範囲を指定します。
```{r}
g <- g + ylim(-.5,.5) # y軸の範囲を指定
print(g)
```
箱ひげ図の箱の下辺は第1四分位(Q1)で，上辺は第3四分位(Q3)です。
真ん中の太い横棒は中央値です。 箱から出ているひげはデータの四分位範囲を超えた値の範囲ですが，黒丸は外れ値を表しています。

次に，バイオリンプロットを作成します。
バイオリンプロットもほぼ箱ひげ図と同じですが，`geom_violin()`を使います。

```{r}
g <- ggplot(df) + aes(x = factor(上場コード), y = ROE)
g <- g + geom_violin() + ylim(-.5,.5) + mystyle
print(g)
```

箱ひげ図やバイオリンプロットから，東証1部と東証2部の上場企業のROEは中央値に差があるものの，分布の形は似ていますが，マザーズの企業は，ROEの分布が大きく異なることがわかります。

### 図の保存

最後に，作成した図を保存するには，`ggsave()`関数を使います。
`ggsave()`関数は，次のような引数をとります。

- `filename =` : 保存するファイル名
- `plot =` : 保存する図
- `width =` : 図の幅
- `height =` : 図の高さ
- `dpi =` : 解像度

日本語を含まないグラフであったり，Windowsならこれでうまくいくのですが，Macで日本語を含むggplotのグラフを保存するには一手間必要です。

#### Macの場合 {.unnumbered}

Macの場合，`ggsave()`関数を使っても，日本語が文字化けしてしまいます。
そこで`quartz()`関数を用いて，次のようにすれば，日本語を含むグラフを保存することができます。
`quartz()`は以下の引数を取ります。

- `filename =` : 保存するファイル名
- `width =` : 図の幅
- `height =` : 図の高さ
- `pointsize =` : フォントサイズ
- `family =` : フォントファミリー
- `type =` : ファイルタイプ
- `antialias =` : アンチエイリアス


```{r}
#| eval: false
quartz("violin_plot.pdf", width = 10, height = 6, pointsize = 10)
print(g)
dev.off()
```
これで作業ディレクトリに`violin_plot.pdf`が保存されました。
