# データの結合

## データを結合する。

別々のデータを結合させて使いたいことはよくあります。
例えば，次のようなデータを結合させる場合を考えてみましょう。

#### 表A {.unnumbered}

| name | term | sale |
|:----|----:|----:|
|トヨタ | 2020 | 1000 |
|トヨタ | 2021 | 900 |
|トヨタ | 2022 | 1400 |
|ホンダ | 2020 | 800 |
|ホンダ | 2021 | 700 |
|ホンダ | 2022 | 900 |


## knitrパッケージ

余談ですが，Rで表を表示するときは，`knitr`パッケージの`kabble()`関数を使うと，表がきれいに表示されます。

```{r}
# install.packages("knitr") # first time only
library(knitr) # 表をきれいに表示する
library(kableExtra) # 表をさらにきれいに表示する
```


## 表A

```{r}
#| label: "table:A"
#| output-location: slide
df_A <- data.frame(
    name = c("トヨタ", "トヨタ", "トヨタ", "ホンダ", "ホンダ", "ホンダ"),
    term = c(2020, 2021, 2022, 2020, 2021, 2022),
    sale = c(1000, 900, 1400, 800, 700, 900)
)
kable(df_A)
```
<!--
## 表B

| name | term | sale |
|:----|----:|----:|
|日産 | 2020 | 400 |
|日産 | 2021 | 500 |
|日産 | 2022 | 900 |
|マツダ | 2020 | 300 |
|マツダ | 2021 | 400 |
|マツダ | 2022 | 200 |
-->

## 表B

```{r}
#| label: "table:B"
#| output-location: slide
df_B <- data.frame(
    name = c("日産", "日産", "日産", "マツダ", "マツダ", "マツダ"),
    term = c(2020, 2021, 2022, 2020, 2021, 2022),
    sale = c(400, 500, 900, 300, 400, 200)
)
kable(df_B)
```


<!--
## 表C

純利益`netincome`をもつ表C


| name | term | netincome |
|:----|----:|----:|
|トヨタ | 2020 | 100 |
|トヨタ | 2021 | 90 |
|トヨタ | 2022 | 150 |
|ホンダ | 2020 | 140 |
|ホンダ | 2021 | 100 |
|ホンダ | 2022 | 90 |
|スバル | 2020 | 30 |
|スバル | 2021 | 35 |
|スバル | 2022 | 50 |
-->


## 表C

```{r}
#| label: "table_C"
#| output-location: slide
df_C <- data.frame(
    name = c("トヨタ", "トヨタ", "トヨタ", "ホンダ", "ホンダ", "ホンダ", "スバル", "スバル", "スバル"),
    term = c(2020, 2021, 2022, 2020, 2021, 2022, 2020, 2021, 2022),
    netincome = c(100, 90, 150, 140, 100, 90, 30, 35, 50)
)
kable(df_C)
```

## 結合の種類

この3つのデータを結合させる場合を考える。

- まず表Aと表Bは同じ変数をもつデータなので縦につなげる
- この結合を**縦結合**とか連結という。
- 縦結合は，`dplyr`パッケージの`bind_rows()`関数を使用

```{r}
#| label: "bind_rows_AB"
#| output-location: slide
df_AB <- bind_rows(df_A, df_B)
df_AB %>% kable()
```
縦に結合できたので，トヨタ，ホンダ，日産，マツダのデータが入ったデータベース`df_AB`ができました。


## 横結合

次に，この`df_AB`と`df_C`を結合させます。
`df_C`は`netincome`という`df_AB`にはない変数があり，異なる変数をもつデータ同士の結合となります。
これらを結合させるには，横につなげる必要があります。
このような結合を**結合**といいます。

結合には，

- **内部結合**(inner join)
- **外部結合**(outer join)

がある。

## 外部結合の種類

- **完全結合**(full join)
- **左結合**(left join)
- **右結合**(right join)

があります。


<!-- 内部結合は**両方のデータベースに存在する観測値のみを保持**するため，多くのデータが欠落することになりますが，**外部結合**は、少なくとも1つのテーブルに存在する観測値を保持するので，大部分のデータが欠落することにはなりません。 -->

## 外部結合の特徴

3つの外部結合の特徴は次の通りです。

- **完全結合**は、`x`と`y`のすべての観測値を保持します。
- **左結合**は、`x`のすべての観測値を保持します。
- **右結合**は、`y`のすべての観測値を保持します。

R神の神書籍[R for Data Science (2e)](https://r4ds.hadley.nz/)の図がわかりやすいので，ここで紹介します。

## R4DSの図

![外部結合の例](img/R4D_join.png)

内部結合と3つの外部結合をベン図で表すとこうなります。

![外部結合のベン図](img/R4D_outer_join.png)

最もよく使われる結合は**左結合**です。
元データに他のデータを結合する場合，元データに含まれるデータのみ保持したい場合が多いので，追加データを調べるときはいつもこれを使います。
左結合はデフォルトの結合であるべきで、他の結合を選択する強い理由がない限り、これを使用します。

## 左結合を実践

では，`df_AB`と`df_C`を左結合してみましょう。
結合する際にキーとして`name`と`term`を使う。

```{r}
df_left <- df_AB %>%
    left_join(df_C, by = c("name", "term"))
print(df_left)
```

`df_AB`にはトヨタ，ホンダ，日産，マツダのデータがありますが，`df_C`には日産とマツダのデータがなく，スバルのデータがあります。
そのため左結合すると，日産とマツダの`netincome`には`NA`が入り，スバルは欠落します。

## 右結合の実践

`df_AB`と`df_C`を右結合してみましょう。

```{r}
df_right <- df_AB %>%
    right_join(df_C, by = c("name", "term"))
print(df_right)
```

`df_C`には日産とマツダのデータがなく，トヨタとホンダとスバルのデータがあります。
そのため右結合すると日産とマツダのデータが欠落し，`df_C`に含まれていたトヨタ，ホンダ，スバルのデータが残ります。
しかしスバルの`sale`には`NA`が入ります。

## 完全結合

最後に，`df_AB`と`df_C`を完全結合してみましょう。

```{r}
df_full <- df_AB %>%
    full_join(df_C, by = c("name", "term"))
print(df_full)
```

`df_AB`にはトヨタ，ホンダ，日産，マツダのデータがありますが，`df_C`にはトヨタ，ホンダ，スバルのデータがあるため，
完全結合した`df_full`にはすべての企業のデータが入ります。
しかし，日産とマツダの`netincome`には`NA`が入り，スバルの`sale`にも`NA`が入ります。



<!--
このように，結合するデータによって，結合したデータに含まれるデータが変わるので，自分が望む結合後のデータの形を考えて，どの結合を使うかを選ぶ必要があります。
-->
<!--
ついでに内部結合もやってみましょう。


```{r}
df_inner <- df_AB %>%
    inner_join(df_C, by = c("name", "term"))
print(df_inner)
```

予想どおり，両方のデータに含まれているトヨタとホンダだけが残り，片方のデータにしか含まれていない日産，マツダ，スバルのデータは欠落してしまいました。
このように内部結合は，両方のデータに存在する観測値のみを保持するため，多くのデータが欠落することになり，利用する機会があまりないです。 -->


## データの保存

前処理が終わったデータは，ファイルとして保存しておくとよいでしょう。
たとえば，`df_left`を`df_left.csv`というファイル名で保存するには，`readr`パッケージの`write_csv()`関数を使います。

`write_csv()`関数の第1引数は保存したいオブジェクト(ここでは`df_left`)で，あとの主要な引数は，

- `file`
- `na = "NA"`
- `append = FALSE`

となります。
`file`は保存するファイル名を指定します。
`na`は欠損値をどうするかを指定します。デフォルトでは`NA`となっています。
`append`は，既存のファイルに追記するかどうかを指定します。基本は上書きなので，`FALSE`にしておきます。

```{r}
write_csv(df_left, file = "df_left.csv")
```

これで，作業ディレクトリに`df_left.csv`が保存されました。
分析を進める際は，このようにして保存したデータを読み込んで使います。

