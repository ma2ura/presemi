---
title: |
  <b>プレゼミ2023</b> </br>
  <span style="color: #282A36; ">統計分析総復習</span>
author: "Soichi Matsuura"
format:
  revealjs:
    theme: ["default", "dracula.scss"]
    transition: convex
    slide-number: true
    df_print: paged
    code-line-numbers: false
webr:
  packages: ['dplyr','ggplot2','readr'] # Install R packages on document open
filters:
  - webr
execute:
  echo: true
  warning: false
---

# 総復習

## Rで統計分析の総復習

1. 基本操作
2. 記述統計と可視化
3. 統計的検定
4. 散布図と相関係数
5. 回帰分析とダミー変数
6. ロジスティクス回帰分析

# 基本操作

## 基本操作：演算

四則演算は`+`，`-`，`*`，`/`をつかう。
累乗は`^`か`**`を使う。

```{webr-r}
# 4 + 2を計算
2 + 4
# かけ算や割り算もやってみてください。
```

## 基本操作：代入

Rは**オブジェクト**と呼ばれる変数にいろんなものを代入し，操作する。
代入には`<-`を使う。

`x`に数字の1,2,3,4,5を代入してベクトルを作る。

```{r}
x <- 1:5
x <- c(1,2,3,4,5) # 上と同じ
```

変数に計算を加えることもできる。

```{r}
x^2
```

## 基本操作：代入と演算

<!-- R言語では，ベクトルや行列などをオブジェクト(変数)に代入して操作する。 -->
以下では`a`に`1`を代入し、`b`に`4`を代入して、`a`と`b`を足す、という演算を行っている。
<!-- 1行に複数のコードを書くときは`;`で区切る。 -->

```{r}
a <- 1
b <- 4
a + b
```

## 基本操作：関数

Rにはいろんな**関数**が用意されている。
関数は`関数名(引数)`という形で使う。
引数に何を入れるかは関数によって異なるので、`?関数名`で表示されるヘルプを参照する。

```{r}
?mean
```

## ヘルプの見方

ヘルプは英語ですが、難しくないので、読めるようになっておくと便利です。

`mean()`関数のヘルプだとArguments(引数)として、

  - `x` ：引数となるRオブジェクトとして、数値や論理値のベクトル、日付、などが取れる
  - `trim`: 平均を出す前に、上位と下位の何パーセントを切り捨てるかを指定する
  - `na.rm` : `TRUE`にすると欠損値を無視して計算する

の説明がある。



## パッケージのインストール

Rは基本関数でもいろいろできるけれど，外部のパッケージを用いて機能を拡張できるので，積極的に活用するのが望ましい

パッケージのインストールは，`install.pacakge()`を使う。
ほぼ必須のパッケージ`tidyverse`をインストールしてみる。

```{r}
#| eval: false
install.packages("tidyverse")
```

## パッケージの読み出し

インストールしたパッケージは`library()`関数で読み出す。
他によく使うパッケージに，`ggthemes`，`patchwork`，`knitr`，`kableExtra`，`modelsummary`などがある。

```{r}
library(tidyverse) # いろいろなパッケージの集まり
library(ggthemes) # ggplot2のテーマ
library(patchwork) # 図を並べる
library(knitr) # 作表
library(kableExtra) # 作表の拡張
library(modelsummary) # モデルのまとめ
```
まだインストールしてないものがあればエラーがでる。

## パッケージの読み出し

```{webr-r}
# tidyverseのreadrを使います。
# readrパッケージ群を読み込んでください。
library()
```

成功していれば何も表示されません。

## Rで読み込めるデータ

**R**は，いろんなファイルを読み込むことができるが，基本はcsvファイルが望ましい。
`tidyverse`のパッケージ群の1つである`readr`パッケージの`read_csv()`関数を使ってCSVファイルを読み込む。
以下では，読み込んだデータをオブジェクト`df`に代入している。

```{r readcsv}
#| cache: true
df <- read_csv("https://so-ichi.com/politics_data.csv")
names(df)
```

`read_csv()`で読み込んだデータは`data.frame`という型になる。

## Excelを読み込む

Excelファイルを読み込むには，`readxl`パッケージの`read_excel()`関数を使うのが便利である。

```{r readexcel}
#| eval: False
# install.packages("readxl") # first time only
library(readxl)
df <- read_xlsx("hoge.xlsx") # 仮のファイル名なので実行してもエラー
```

## データの確認

読み込んだデータを確認するために，次のような関数が使える。

- `names()` データフレームの変数の名前を返す
- `glimpse()` より詳しい記述統計量を返す。

```{webr-r}
# names()やglimpse()も試してみてください。
library(readr)
library(curl)
df <- read_csv("https://so-ichi.com/politics_data.csv")
glimpse(df)
```

データをRに読み込ませることができれば，あとはデータを調理するだけ。

## 準備

作図に用いる`ggplot2`パッケージは，Macで文字化けを起こすので，おまじないとして，以下のコマンドを実行しておきます。

```{r}
knitr::opts_chunk$set(dev = "ragg_png")
theme_set(theme_economist(base_size = 12)) # ggplot2のテーマ
update_geom_defaults("point", list(size = 3))
```


# 記述統計と可視化

## 記述統計量

データの特徴を表す統計量を**記述統計量**と呼び，平均，中央値，標準偏差，最大値，最小値，四分位点などがあり，それらを計算する基本関数が用意されている。

- `mean()` 平均
- `median()` 中央値
- `sd()` 標準偏差
- `max()` 最大値
- `min()` 最小値
- `quantile()` 四分位点

## 記述統計量

`mean()`などの関数は，引数にベクトルをとる。
しかしそのベクトルに欠損値`NA`があるとエラーが返ってくるため，欠損値を無視して計算してもらうため，`na.rm = TRUE`という引数を追加する。


```{r}
mean(df$expm, na.rm = TRUE) # 欠損値を無視して平均
```

```{webr-r}
# expmの平均や標準偏差を計算してみてください。
mean(df$expm)
```

## 記述統計量

記述統計の表を作成するには，`summary()`関数を使う。

```{r}
summary(df) |> kable() |> kable_styling(font_size = 12)
```

## パイプ演算子

Rではパイプ演算子`|>`を使って，処理をつなげることができる。
`x |> f()`は`f(x)`と同じ意味になるので，引数を関数の外で指定することができる。

```{r}
round(mean(x), digits = 2)
```
と
```{r}
x |>
  mean() |>
  round(digits = 2)
```
は同じ結果を返しますが，後者のほうが見やすい。

## 作図：ggplotの基本

作図には`tidyverse`の`ggplot2`パッケージを使う。
`ggplot2`パッケージは，以下の関数を使って図を作成する。

- `ggplot()` : 作図の基礎になるデータフレームを指定
- `aes()` : 軸に当てる変数を指定
- `geom_***()` : 図の種類を指定

注意点として，`ggplot()`の引数には`data.frame`しか受け付けないことです。

## 作図：ggplotの図の種類

作図の種類として以下のものがよく使う。

- 1変数のグラフ
  - `geom_histogram()` : ヒストグラム
  - `geom_boxplot()` : 箱ひげ図
- 2変数のグラフ
  - `geom_point()` : 散布図
  - `geom_bar()` : 棒グラフ
  - `geom_line()` : 折れ線グラフ


## 作図：ggplotの使い方

`ggplot()`の引数に`df`を入れ，`aes()`の引数に変数を1つを指定し，ヒストグラムを作成する`geom_histogram()`を使う。

```{r}
ggplot(df) + aes(x = expm) + geom_histogram()
```

## 作図：箱ひげ図

グループごとに箱ひげ図を作成するなら，`aes()`の中で，`group =`とか`color = `で指定する。

```{r}
ggplot(df) + aes(x = expm, color = party_jpn, group = party_jpn) + geom_boxplot()
```

# 統計的検定


## 用語の意味

::: columns
:::{.column width="50%"}
- **母集団**：研究対象となるすべての集合
- **標本(サンプル)**：母集団から抽出されたデータ
- **標本サイズ**：標本に含まれるデータの個数
- **標本数・サンプル数**：標本の数のこと(標本サイズじゃないよ)
:::
:::{.column width="50%"}

- **母数(パラメータ)**：母集団を特徴付ける値、母平均や母分散など
- **統計量**：標本を特徴付ける値、標本平均や標本分散など
- **推定量**：母数の推定に使われる統計量
- **統計的推定**：推定量から母数を予想すること

:::
:::

## 使う関数

- `dnorm()` : 正規分布の確率密度関数を計算
- `rnorm()` : 正規分布から乱数を発生させる
- `curve()` : 関数をグラフに描画
- `hist()` : ヒストグラムを作成する
- `breaks = 20` : ヒストグラムの棒の数を指定


## 母集団と標本と推定

- **母集団**とは関心のある対象全体の集合
- **標本**とは、母集団から一部を抜き出したもの
- **推定**とは、標本を通じて母集団の特性(パラメータ)を推定すること

統計学とは、標本から未知の母集団の特性をどのように探求するかについて研究する学問

> 作ったお味噌汁の味を確かめるために全部飲む必要は無い。

## 推定

- 観察できない**母数は定数**
- 標本から得られる推定量(例えば平均)は標本が変われば値が変わるので**推定量は確率変数**

パン屋さんが作る食パンの真の重さ(母数)は分からないけど、パン屋さんで毎日買ってきた食パンの重さの平均(標本平均)は分かる。
でも、店先にたくさん並んでいる食パンのどれを選んで買うかによって、標本平均は変わる。

## 検定

**統計的検定**とは，母集団の母数である**母平均や母分散**を，母集団から無作為抽出した標本から計算された**標本平均や標本分散で推定すること**である。

- 手元にある標本から，母集団を推定することを**推定**という。
- 毎日1つ食パンを買って重さを計り、そこから計算される平均重量は標本平均
- 食パンの標本平均が、食パンの真の重さである母平均とどの程度異なるかを調べる。
- しかし、標本平均は確率変数なので、標本ごとに平均が異なる。

## 平均の検定

母平均10、母標準偏差1の分布をもつ母集団を作る。

```{r}
pmean <- 10 # 母平均
psd <- 1 # 母標準偏差
dnorm(x,pmean,psd) |> curve(5,15)
```

これが母集団となる正規分布

## 標本をあつめる。

母集団から標本サイズ100の標本を1つ抽出する。

```{r}
n <- 100 # 標本サイズ
x <- rnorm(n, pmean, psd) # 標本を抽出
hist(x, breaks = 20) # ヒストグラムを作成
```
平均値は`r mean(x)`で、母平均$10$と一致しない。
この差を**誤差**という。

## 標本平均の分布

標本サイズ100の標本を1000回抽出して、1000個の標本平均を計算し、ヒストグラムにする。
繰り返しの回数を`trial`とする。
繰り返しには`replicate()`関数を使う。

```{r}
#| output-location: slide
trial <- 1000
x <- replicate(trial, rnorm(n, pmean, psd))
hist(x)
```
標本平均の平均は、`r mean(x)`で、母平均$10$に近い。

## 検定

ある標本から計算された標本平均が母平均と異なっている、ということを統計的に主張するために検定を行う。ここでは$t$検定を行う。

- $H_0$ : 標本平均は母平均と等しい
- $H_a$ : 標本平均は母平均と異なる

$t$検定には`t.test()`関数を使う。

