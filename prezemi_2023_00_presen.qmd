---
title: |
  <b>プレゼミ2023</b> </br>
  <span style="color: #282A36; ">第0回 Rの基本操作</span>
author: "Soichi Matsuura"
format:
  revealjs:
    theme: ["default", "dracula.scss"]
    transition: convex
    slide-number: true
    chalkboard: true
    df_print: paged
# highlight-style: "dracula"
highlight-style: github
execute:
  echo: true
  warning: false
---

## 今日の目標


第0回講義の**到達目標**は、

- Rファイル「.r」をダブルクリックするとRStudioかVS Codeが起動する。
- Posit Cloudでファイルをアップロードしたり、結果を共有することができる。
- ソースコードを書いて、実行することができる。
- パイプ演算子をショートカットで入力できる。


# Rファイル

Rでよく出てくる拡張子

- `.r` : Rのソースコード
- `.R` : Rのソースコード
- `.qmd` : Quarto
- `.Rmd` : R Markdown
- `.Rproj` : RStudioのプロジェクトファイル
- `.csv` : CSVファイル

Rのソースコードが書かれた

必要なパッケージを導入する。まだならインストールする。

```{r}
library(tidyverse) # とりあえずこれ
```

## 本日のデータ

本日のデータは以下から入手します。

```{r}
# データをウェブサイトから読み込む
df <- read_csv("https://so-ichi.com/RandD_2022.csv")
# 中身チェック
glimpse(df)
```

## 変数

- 会社コード <文字列> "0000001"
- 企業名 <文字列> "極洋"
- 決算期 <文字列> "1999/03"
- 連結基準 <数値> 1
- 決算月数 <数値> 12
- 日経業種コード <数値> 235341
- 売上高 <数値> 171944
- 資産合計 <数値> 62109

## 変数のタイプ

- **量的変数**：数値で表される変数
  - *比例尺度*：0が原点であり、間隔と比率に意味がある
  - *間隔尺度*：目盛が等間隔になっているものでその間隔に意味がある

- **質的変数**
  - *名義尺度*：他と区別し分類するための名称
  - *順序尺度*：順序や大小には意味があるが間隔には意味がない（背後には連続的関係）

## 質的変数：名義尺度

プログラミング言語では，データの型をいい感じに指定してくれることもあるが，分析の目的に応じて，自分で型を変換する必要もある。

- 会社コード・企業名は名義尺度なので，ファクター型
- 決算期は時間なので本来は間隔尺度だけれどファクター型
- 連結基準は会計基準を表す数値なのでファクター型
- 日経業種コードは産業分類を表しているのでファクター型
- 決算月数，売上高，資産合計は比例尺度

## ファクター型

文字列や数値でもカテゴリーを表す変数なら名義尺度として表すためファクター型にする。
`as.factor()`関数を使うと，ファクター型に変換できる。
```{r}
# ファクター型に変換
df <- df %>%
  mutate(
    会社コード = as.factor(会社コード),
    企業名    = as.factor(企業名),
    連結基準   = as.factor(連結基準)
  )
```

## 年度データ

決算期は`YYYY/MM`の形式の文字列なので，最初の4文字を取り出して，ファクター型に変換し，年度データ`年度`にする。

```{r}
# 年度データに変換
df <- df %>%
  mutate(
    年度 = as.factor(substr(決算期, 1, 4))
  )
```

## 日経業種コード

日経業種コードは6ケタの数値で，`XYYZZZ`という構造になっている。

- 最初の1ケタ`X`は大分類：製造業 or 非製造業
- 次の2ケタ`YY`は**中分類**：業種分類で最も良く使う
- 最後の3ケタ`ZZZ`は小分類：

```{r}
# 日経業種コードをファクター型に変換
df <- df %>%
  mutate(
    中分類 = as.factor(substr(日経業種コード, 2, 3))
  )
```

## データの確認


::: columns
::: {.column width="45%"}
```{r}
#| eval: false
table(df$中分類)
```
と書いて、その行にカーソルがある状態で、`Ctrl + Enter`を押すと、
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{r}
#| echo: false
table(df$中分類) |> knitr::kable()
```
という計算結果が表示されます。
:::
:::

# 産業別・年度別のグラフ作成

## 産業別・年度別の平均売上高

平均売上高を計算するには，

```{r}
mean(df$売上高)
```
`NA`が買ってきました。欠損値を含むデータでは，`mean()`関数は計算できないので，`na.rm = TRUE`を指定する。

```{r}
mean(df$売上高, na.rm = TRUE)
```

`r mean(df$売上高, na.rm = TRUE)`百万円の平均売上となりました。
これは何の平均でしょう？


## 産業別・年度別の平均売上高

データ全体の平均売上高を計算してもしょうがないので，**年度別の平均売上高**を計算します。
`dplyr`パッケージの`group_by()`関数を使います。

```{r}
#| output-location: slide
df %>%
  group_by(年度) %>%
  summarise( # 平均を計算
    平均売上高 = mean(売上高, na.rm = TRUE)
  ) %>%
  kable() %>% # キレイな表
  kable_styling(font_size = 20) # 表のフォント
```

## 産業別・年度別の平均売上高

`group_by()`に2つのカテゴリー変数を指定して，**年度別・産業別の平均売上高**を計算し，`df_ave`に保存する。

```{r}
#| output-location: slide
df_ave <- df %>%
  group_by(年度,中分類) %>%
  summarise( # 平均を計算
    平均売上高 = mean(売上高, na.rm = TRUE)
  )
df_ave %>%
  kable() %>% # キレイな表
  kable_styling(font_size = 20) # 表のフォント
```


# 作図

## ggplot2パッケージ

- `ggplot2`パッケージは，グラフを作成するためのパッケージです。
- `ggplot()`関数は引数にデータフレームをとります。
- `aes()`関数で，x軸とy軸やグループ，色を指定します。
- `geom_***()`関数で，グラフの種類を指定します。
- `+`でグラフにレイヤーを追加します。
- `theme()`関数でグラフの見た目を指定します。
- `labs()`関数でグラフのタイトルや軸ラベルを指定します。

## ggplot2パッケージ

```{r}
#| output-location: slide
g <- ggplot(df_ave) +
  aes(x = 年度,
      y = 平均売上高,
      group = 中分類,
      color = 中分類
      ) +
  geom_line() + geom_point() # 線と点を追加
g <- g + xlab("年度") + ylab("平均売上高") # 軸ラベル
g <- g + mystyle
print(g)
```

## plotlyパッケージ

先ほど作成したグラフを動的なものにするには，`plotly`パッケージを使います。

```{r}
#| output-location: slide
#| fig-width: 10
#| fig-height: 6
library(plotly)
library(leaflet)
ggplotly(g)
```
