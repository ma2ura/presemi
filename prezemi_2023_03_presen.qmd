---
title: |
  <b>プレゼミ2023</b> </br>
  <span style="color: #282A36;">第3回 Rの使い方・データ操作・可視化</span>
author: "Soichi Matsuura"
format:
  revealjs:
    theme: ["default", "dracula.scss"]
    transition: convex
    slide-number: true
# highlight-style: "dracula"
highlight-style: github
execute:
  echo: true
  warning: false
---

## 今日の目標


第3回講義の**到達目標**は、

- *Posit Cloud*にログインして、ブラウザ上でRstudioを使うことができる。
- *Visual Studio Code*で`R`のソースコードを書くことができる。
- `dplyr`の関数を使ってデータ操作ができる。
- 新しい変数を作成して、企業平均や年度平均を計算することができる。

# Rを使う理由

## プログラミングの基本

MS Excelでもできることを、なぜ`R`でやるのか、というと、

- 代入 `x <- c(1,2,3)`
- 関数 `mean(x)`
- 繰り返し `for(i in 1:10) { print(i) }`
- 分岐 `if(x > 0) { print("+") } else { print("-") }`

ができ、そのプロセスをソースコードとして記録できるからである。

## Rの基本操作

`R`はCUI(command user interface)と呼ばれる、コマンドを打ち込んで操作するタイプのソフトウェアなので、操作はすべてキーボード入力する。

まずは、`1+2`を計算してみます。


::: columns
::: {.column width="45%"}
```{r}
#| eval: false
1 + 2
```
と書いて、その行にカーソルがある状態で、`Ctrl + Enter`を押すと、
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{r}
#| echo: false
1 + 2
```
という計算結果が表示されます。
:::
:::


## よく使う演算希望

基本的な演算は以下の通りです。


- `+`加算，`-`減算, `/`除算, `*`乗算
- `^`累乗, 2の2乗は`2^2`
- `sqrt()`関数で平方根の計算
- `c()`関数でベクトルの作成
- `mean()`関数で平均を計算
- `seq()`関数で数列の作成

## パッケージで機能拡張

Rはパッケージを使って機能を拡張することができます。

- `install.packages()`関数でパッケージをインストールする。2回目の起動からは必要なし
- `library()`関数でパッケージを読み込む

必要なパッケージをインストールしてみます。

```{r}
#| eval = FALSE
install.packages("tidyverse") # 最初の一回だけ実行
install.packages("knitr") # 最初の一回だけ実行
install.packages("kableExtra") # 最初の一回だけ実行
```

パッケージを読みこむ。

```{r}
library(tidyverse)
library(knitr)
library(kableExtra)
```

## 便利なパッケージ達

`R`はフリーウェアで、誰でもパッケージを作って公開することができるため、非常に多くのパッケージが開発されている。


```{r}
#| eval = FALSE
install.packages("bloom") # 結果の整形
install.packages("ggthemes") # グラフの見た目
install.packages("modelsummary") # 回帰結果の作表
install.packages("kableExtra") # 表の整形
install.packages("patchwork") # グラフを並べて表示
```

とりあえず、`R`を開いたらすぐ`tidyverse`を読み込んでおけばよい。

## Githubとの連携

- **GitHub**は、Gitというバージョン管理システムを使って、ソースコードのバージョン管理をクラウド上で行うことができる無料サービス
- 使いこなすには少々勉強が必要ですが、使えれば非常に有用
- VS CodeはGit/GitHubとの連携も簡単なので、複数人でウェブ開発やプログラミングをする場合には必須

まずは、GitHubのウェブサイトにアクセスし、アカウントを作成してください。

[GitHub](https://github.com/)

## GitHub本

書籍やウェブサイトを参考

:::{layout-ncol=3}
![GitHubのオススメ本](./img/github_book01.jpg){width=6cm}

![はじめてでもできるGitとGitHubの教科書](./img/github_book02.jpg){width=6cm}

![わかばちゃんと学ぶGit使い方入門](./img/github_book03.jpg){width=6cm}
:::

## GitHub Copilotを使う

- GitHub Copilotは、AIがコードの作成を支援してくれる超便利なツール
- 学生は無料で利用できるので、プログラミングを学習しようとしている人は、導入すべし

[GitHub Copilot](https://copilot.github.com/)


## 作業ディレクトリ(重要)

- `R`は、**作業ディレクトリ**(working direcotry)というフォルダを指定して、その中のファイルを読み込んだり、そこにファイルを書き出したりする。
- `R`が現在どのフォルダを作業ディレクトリとしているかは、`getwd()`関数で確認
- 変更するときは、`setwd()`関数を使い、フォルダの(絶対)パスを指定

```{r eval = FALSE}
getwd() # 作業ディレクトリ
```

## `R`ファイルの作成

- `R`ファイルは、`R`のソースコードを書くためのファイルで拡張子は`.r`
- RstudioやPosit Cloudでは、`File`メニューから`New File`を選択し、`R Script`を選択すると、新しいファイルが作成される。
- VS Codeだと、`Ctrl + N`で新しいファイルを作成できる。

作業ディレクトリに`presemi_2023_day3.r`というファイルを作成してください。

## ライブラリの読み込み

:::{.panel-tabset}

## 問題

`tidyverse`パッケージを読み込んでください。

## 解答

```{r}
# install.packages("tidyverse")
library(tidyverse)
```

:::

## データの読み込み

::: {.panel-tabset}

## 問題

`https://so-ichi.com/kesho_2023.csv`からデータを読み込んで、`df`オブジェクトに代入し、中身を確認してください。

## 解答

```{r}
# データ読み込み
df <- read_csv("https://so-ichi.com/kesho_2023.csv")
glimpse(df) # オブジェクトの中身を確認
```

:::

# データ・ハンドリングの準備

## 変数の確認

データを読み込んだら、まずは変数の確認をします。
`tidyverse`の`glimpse()`を使うと、変数名だけでなく、変数の型はデータの一部を確認できる。
```{r}
#| label: "glimpse"
#| output-location: column
glimpse(df)
```

## 変数名の確認

変数の名前だけを知りたい場合は、`names()`を使う。

```{r}
#| label: "names"
#| output-location: column
names(df)
```

## 変数名の確認

`kesho_2023.csv`には次の変数がある

- `code` : 企業コード (文字列)
- `name` : 企業名 (文字列)
- `term` : 決算年月 (文字列)
- `shubetsu` : 会計基準の種類 (数値)
- `ren` : 連結か単体 (数値)
- `sales` : 売上高 (数値)
- `netincome` : 当期純利益 (数値)
- `month` : 決算月数 (数値)

## 変数の型

変数の型を知りたい場合は、`str()`を使う。

```{r}
#| label: "str"
#| output-location: slide
str(df)
```

## 特定の変数の型

特定の変数の型を知りたい場合は、`class()`を使う。

```{r}
#| label: "class"
class(df$sales)
```

## データフレームの変数を指定する

- データ・フレームの変数を指定するには「`$`」を使う。
- `df`の中の`netincome`を指定するなら，
```{r}
df$netincome
```

とする。

## データフレームの変数の特定の値を指定する

- データ・フレームの変数の特定の値を指定するには「`[]`」を使う。
- `df`の中の`netincome`の1行目を指定するなら，
```{r}
df$netincome[1]
```

あるいは行と列を指定する。

```{r}
df[1, "netincome"]
```



## オブジェクトの主要な型

変数の型は非常に重要

- `character` : 文字列
- `numeric` : 数値
- `integer` : 整数
- `factor` : カテゴリー
- `logical` : 論理値

## オブジェクトの主要な型

- `data.frame` : データフレーム
- `tibble` : データフレームの改良版
- `list` : いろんなものをまとめたもの

プレゼミでは主に`data.frame`を使う。

## データフレーム

- データフレーム(`data.frame`)は、行と列からなる表形式のデータ構造
- 行は観測単位、列は変数
- 列はすべて同じ型でなければならない
- 行は同じ型でなくてもよい


## データの型の確認

::: {.panel-tabset}

## 問題

`df`の変数である`term`の型を確認してください。

## 解答

```{r}
# class()で確認
class(df$term) # オブジェクトの中身を確認
```

:::



# データの整形 tidyverse

## `dplyr`パッケージ

`tidyverse`パッケージ群の`dplyr`パッケージが大活躍

- `select()` : 変数を選択する
- `filter()` : データを抽出する
- `mutate()` : 変数を追加する
- `group_by()` : データをグループ化する
- `summarise()` : データを集計する
- `arrange()` : データを並び替える


## パイプ演算子

- ソースコードを可読性の高いものするために便利なのが**パイプ演算子**
- パイプ演算子は，**左側のオブジェクトを右側の関数の第一引数に渡す**という処理を行う。
- パイプ演算子は2種類あって、基本`R`の`|>`と`magrittr`パッケージの`%>%`がある。

```{r}
(1 + 2) %>% sqrt()
(1 + 2) |> sqrt()
```

## パイプ演算子の例

`rnorm()`関数を使って平均0，分散1の標準正規分から100個のデータを作る。
`rnorm()`関数は3つの引数を取ります。

1. データの個数
2. 平均
3. 標準偏差

## 正規分布から標本を取り出す。

`rnorm(100, 0, 1)`は、平均0，分散1の標準正規分布から100個のデータを取り出す。
パイプ演算子を使うと，

```{r}
100 %>% rnorm(mean = 0, sd = 1) %>% head()
```
`rnorm()`関数の第1引数がデータの個数なので，そこに`100`を渡しています。

---

ここで平均に値を渡したい場合を考えます。
`mean`引数は第2引数なので，パイプ演算子では自動で渡してくれません。
そこで`.`を使って渡す場所を指定してあげます。
```{r}
100 %>% rnorm(100, mean =. , sd = 1) %>% head()
```
これで平均100，標準偏差1の正規分布から100個のデータを取り出せました。


# データ・ハンドリング実践

## 新しい変数を作成する `mutate`

- 新変数の作成には`dplyr`パッケージの`mutate()`関数
- 先ほど読みこんだデータから，当期純利益を売上高で除して売上高当期純利益率を計算して，`ratio`という変数を作る

:::{.callout-important}
## mutate()で新変数

`dplyr`パッケージの`mutate()`関数を使う。

```{r}
df <- df %>%
    mutate( # 新しい変数を作成
        ratio = netincome / sales # 売上高利益率
        )
```
:::

<!-- ::: {.callout-tip}
## MS Excelの場合

`I1`のセルに変数名を表す`ratio`と入力する。
F列の`sale`とG列の`netincome`を使って，`I2`のセルに

`= G2 / F2`

とし，`I2`セルの右下の四角をダブルクリックすると，自動で下のセルにも同じ計算がコピーされる。
::: -->

## 条件に応じて値を変える `ifelse`

- ある変数の値に応じて異なる値をとる変数を作る
- `mutate()`関数と`ifelse()`関数を組み合わせる。
- `ifelse()`関数は次のような引数を取ります。

```{r}
#| eval: false
ifelse(条件, 条件が真のときの値, 条件が偽のときの値)
```

## 条件に応じて値を変える `ifelse`の例

売上高当期純利益率`ratio`が5%(つまり0.05)以上ならば「高い」，
そうでなければ「低い」という変数`highlow`を作ってみる。

:::{.callout-important}
## `mutate()`と`ifelse()`

条件分岐を使って新変数作成

```{r}
df <- df %>%
    mutate( # 新しい変数を作成
        highlow = ifelse(ratio >= 0.05, "高い", "低い") # 売上高利益率
        )
```
:::
<!--
::: {.callout-tip}
## MS Excelの場合
`J1`セルに`highlow`と入力する。
`J2`セルに

` = if(I2 >= 0.05, "高い", "低い")`

と入力し，`J2`セルの右下の四角をダブルクリックすると，自動で下のセルにも同じ計算がコピーされる。
:::

Excelだとセルの移動や変数名の入力，計算式の入力，セルのコピーといった作業で，キーボードとマウスを行ったり来たりする必要があり，若干面倒です。 -->

## `mutate()`で変数の値を変える

- `mutate()`関数を使って，長すぎる企業名を短くする。
- 「ポーラ・オルビスホールディングス」を「ポーラ」と略
- `name`変数の値が「ポーラ・オルビスホールディング」ならば「ポーラ」という値をとる変数を作成

:::{.callout-important}
## Rの場合
```{r}
df <- df %>%
    mutate( # 新しい変数を作成
        name = ifelse(
            name == "ポーラ・オルビスホールディング", "ポーラ", name) # 企業名
        )
```
:::

## `mutate()`で年度を取り出す。

- `term`変数には，`2020/3`のように年月を表す文字列が入っている。
- `term`から年度を取り出して，`year`という変数を作成する。

```{r}
df <- df %>%
  mutate(
    # 1文字目から4文字目までを取り出す
    year = substr(term, 1, 4)
    )
```

## データを抽出する `filter`

データを抽出するには，`dplyr`パッケージの`filter()`関数を使います。
`filter()`関数は，次のような引数を取ります。

```{r}
#| eval: false
filter(データ, 条件)
```

## データを抽出する `filter`の例

先ほど作成した`highlow`が「高い」企業だけを抽出する。

- `filter()`関数の中の条件は，`==`を使って，`"高い"`という文字列と一致するかどうかを確認
- `highlow`変数の値が`"高い"`と一致する企業だけを抽出し，`df_high`という変数に代入

:::{.callout-important}
## `filter()`の例

一致は`==`を使う。`=`だとエラーが出るので注意

```{r}
df_high <- df %>%
    filter(highlow == "高い") # 文字列は""で囲む
```
:::
<!--
::: {.callout-tip}
## MS Excelの場合
highlow変数のあるJ列をクリックして枠を移動させ，上の「ホーム」メニューから「並び替えとフィルター」をクリックし，「フィルター」をクリックする。
すると，変数名highlowのヨコに漏斗のようなマークが出るので，それをクリックすると，記録されたデータの種類が出てくるので，「高い」だけにチェックが入った状態にする。
::: -->

## データを抽出する `filter`の条件

`filter()`関数の中で指定する条件は，

- `==` : 一致する
- `!=` : 一致しない
- `>=`や`<=` : 以上や以下
- `>`や`<` : より大きいや小さい
- `%in%` : いずれかに一致する

などがあります。

## 条件を組み合わせる

またこれらの条件を組み合わせることもできます。
その場合は，以下のように`&`や`|`を使います。

- `&` : かつ
- `|` : または

## データを抽出する `filter`の例

たとえば，資生堂と花王を抽出したり，売上高当期純利益率が5%以上かつ売上高が1000億円以上の企業を抽出するには，
次のように書きます。

:::{.callout-important}
## 条件の組み合わせ

資生堂で、利益率が5％以上で、売上高が1000以上の年度を抽出

```{r}
#| label: "filter_shiseido_kao"
#| output-location: slide
df_shiseido <- df %>%
    filter(
      name %in% c("資生堂") &
      ratio >= 0.05 &
      sales >= 1000000
      ) # 3つの条件を組み合わせる
kable(df_shiseido)
```
:::


## 変数を選択する `select`

データから特定の変数を取り出すには`dplyr`パッケージの`select()`関数を使う。
`df_shiseido`から，企業コード，企業名，利益率の3つの変数だけを選択してみる。

:::{.callout-important}
## `select()`で変数選択

`name`と`term`と`sales`と`ratio`の4つの変数だけ選択して上書き

```{r}
df_shiseido <- df_shiseido %>%
    select(name, term, sales, ratio) # 3つの変数だけ選択
kable(df_shiseido)
```
:::

<!-- ::: {.callout-tip}
## MS Excelの場合
オリジナルのデータをコピーして，下のタブから別のシートを選択し，そこに貼り付ける。

貼り付けたデータから`code`と`name`と`ratio`以外の列を削除する。
::: -->

## 変数を選択する `select`の例

`select()`関数の中で使えるものには，以下のようなものがある。

- `-` : 除外する (`-ratio`とかくと`ratio`以外を選択)
- `:` : 連続する変数を選択 (`code:ren`と書くと`code`から`ren`までを選択)
- `starts_with()` : ある文字列で始まる変数を選択
- `ends_with()` : ある文字列で終わる変数を選択

比率を表す変数は`ratio`で始まるように統一しておく，基準化した変数には`_K`を最後に付けておく，とすると選択が簡単

## データを並び替える `arrange`

データを並び替えるには，`dplyr`パッケージの`arrange()`関数を使います。

:::{.callout-important}
## Rの場合
```{r}
#| output-location: column
#| #| code-line-numbers: "3"
df %>%
  # 2つの変数だけ選択
  select(name, ratio) %>%
  arrange(ratio) %>%
  head() %>%
  kable() %>%
  kable_styling(font_size = 20)
```
:::

小さい順に並び替えられました。

## 降順に並び替える

降順にするには`desc()`関数を使う。

:::{.callout-important}
## Rの場合

必要な変数を選択肢、降順に並び替えて、先頭の5行のみを表にした。

```{r}
#| label: "arrange_desc"
#| output-location: column
#| code-line-numbers: "3"
df %>%
  select(name, ratio) %>%
  arrange(desc(ratio)) %>%
  head(6) %>% # 先頭の5行
  kable() %>%
  kable_styling(font_size = 20)
```
:::
これでどの企業のどの年度の売上高当期純利益率が大きいのかが一目瞭然

## グループ集計

- `dplyr`の`group_by()`関数を使ってデータをグループ化
- `dplyr`の`summarise()`関数を使ってグループ集計

```{r}
#| label: "group_by_summarise"
#| output-location: slide
df |>
  group_by(name) |> # 企業ごとに以下の計算
  summarise(
    mean_sales = mean(sales, na.rm = T), # 平均売上
    mean_ratio = mean(ratio, na.rm = T) # 平均利益率
    ) |>
  kable()
```
何行何列の表になるか分かりますか？

## グループ集計：年度別

`group_by()`の引数を2つにすると、2つの変数でグループ化

::: {.panel-tabset}

## 問題

2015年以降の企業別・年度別に平均売上高と平均利益率を計算する。

## 解答

```{r}
#| label: "name_term"
#| output-location: slide
df |>
  filter(year >= 2015) |>
  group_by(name,year) |> # 企業ごとに以下の計算
  summarise(
    mean_sales = mean(sales, na.rm = T), # 平均売上
    mean_ratio = mean(ratio, na.rm = T) # 平均利益率
    ) |>
  kable() |> kable_styling(font_size = 8)
```

:::


<!--
MS Excelだと，

::: {.callout-tip}
## MS Excelの場合

「ホーム」メニューから「並び替えとフィルター」をクリックし，「昇順」をクリックする。

必要なデータだけ選択してコピペすれば，表が完成します。
::: -->

<!-- となります。 -->
<!-- 簡単ですが，MS Excelの並び替えは注意が必要で，並び替えた後にデータを追加すると，並び替えが解除されてしまい，元に戻せなくなったり，空列があると並び替えがうまくいかなかったりします。 -->

## long形式とwide形式

人間には読みやすいけれどパソコンは読みにくい，というデータの形式がある。

| 地点 |   6時    |   12時   |   18時   |
|:----:|:--------:|:--------:|:--------:|
| 札幌 | 12℃  | 15℃  | 13℃  |
| 大阪 | 20℃  |  24℃  |  22℃  |
| 福岡 |  23℃  | 25℃  | 25℃  |

このような形のデータを**ワイド形式**(wide)といい，人間には見やすいが，コンピュータにとっては読みにくい形式

## long形式とwide形式

プログラミングで使うのは**ロング形式**(long)のデータ

| 地点  | 時間  |  気温(℃) |
|:----:|:----:|:-------:|
| 札幌  | 6時   |   12    |
| 札幌  | 12時  |   15    |
| 札幌  | 18時  |   13    |
| 大阪  | 6時   |   20    |
| 大阪  | 12時  |   24    |
| 大阪  | 18時  |   22    |
| 福岡  | 6時   |   23    |
| 福岡  | 12時  |   25    |
| 福岡  | 18時  |   25    |


## 整然データ

- このロング型のうち，一定のルールに従って作成されたデータを**整然データ(tidy data)**といい，扱うデータが整然データとなるように処理することを目指す。
- R神Hadley Wickham氏は，データの型を理解することを，データ分析の第一歩とし，その一貫として整然データという考え方を提唱しています。
- 整然データとは，次のような原則に従って構築されたデータのことです(Wickham, 2014) 参考[https://id.fnshr.info/2017/01/09/tidy-data-intro/](https://id.fnshr.info/2017/01/09/tidy-data-intro/)。

## 整然データのルール

1.  個々の変数 (variable) が1つの列 (column) をなす。
2.  個々の観測 (observation) が1つの行 (row) をなす。
3.  個々の観測の構成単位の類型 (type of observational unit) が1つの表 (table) をなす。
4.  個々の値 (value) が1つのセル (cell) をなす

## 整然データの例

<!-- 上の表は，地点，時間，天気，気温の4つの変数があり1つの列をつくっています(ルール1)。 大阪12時の天気は雨，気温は12℃といったように1つの行が1つの観測を表しています(ルール2)。 このデータには種類の異なる観測はない(ルール3)。 また，各セルには1つの値が入っています(ルール4)。 よって，これが整然データとなります。 -->

ロング型の天気データを使って，ロングからワイド，ワイドからロングの操作を学びましょう。

まずデータを作ります。
```{r}
#| label: "long_weather"
#| output-location: slide
df_weather <- data.frame(
    place = c(rep("札幌",3), rep("大阪",3), rep("福岡",3)),
    time = rep(c("6時", "12時", "18時"),3),
    temp = c(12,15,13,20,24,22,23,25,25)
)
kable(df_weather) |> kable_styling(font_size = 24)
```

これはロング型の整然データとなる。

## ロングからワイド `pivot_wider`

- Rで使うならこのままでよいのですが，あえてこれをワイド型に変えてみる。
- 教科書で使用されている`spread()`は「**根本的に設計ミスってた**」と公式で発表
- そこでR神が作った`pivot_wider()`が推奨

`pivot_wider()`はロング型をワイド型にする関数

## ロングからワイド `pivot_wider`

`pivot_wider()`の主な引数は，`names_from`と`values_from`の2つ

- `names_from`は，ワイド型にするときに，**どの変数を列にするか**を指定
- `values_from`は，ワイド型にするときに，**どの変数の値を使うか**を指定

## `pivot_wider`実践

以下では，`time`変数の値を列に，`temp`変数の値を値にして，`df_wide`という変数に代入

```{r}
#| label: "pivot_wider2"
#| output-location: slide
df_wide <- df_weather |>
    pivot_wider(
      names_from = time,
      values_from = temp
      )
kable(df_wide)
```
これでワイド型に変換

## ワイドからロング `pivot_longer`

次に，このワイド型のデータをロング型に変換するため、R神による`pivot_longer()`を使用

`pivot_longer()`の引数は，`cols`と`names_to`と`values_to`です。

- `cols`は，ロング型に変換するときに，どの変数を行にするかを指定
- `names_to`は，ロング型に変換するときに，どの変数の値を使うかを指定
- `values_to`は，ロング型に変換するときに，どの変数の値を使うかを指定

## ワイドからロング `pivot_longer`

以下のコードでは，`6時`，`12時`，`18時`の3つの変数を行に，`time`という変数の値を列に，`temp`という変数の値を値にして，`df_long`という変数に代入

```{r}
#| label: "pivot_longer2"
#| output-location: slide
df_long <- df_wide |>
    pivot_longer(
        cols = c("6時", "12時", "18時"), # 縦にする変数
        names_to = "time", # 縦にした変数名
        values_to = "temp") # 値
kable(df_long) |> kable_styling(font_size = 24)
```

元のロング型に戻りました。

