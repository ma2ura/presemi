{
  "hash": "10aea8e33659eda7ea11b112e3ae86a2",
  "result": {
    "markdown": "# 記述統計とデータの可視化・視覚化\n\n第5回講義の**到達目標**は、\n\n- 適切なデータの型を選択し，データを読み込むことができる。\n- カテゴリー変数を用いて表を作る事が出来る。\n- `dplyr`パッケージを駆使して前処理を行い，作図するために必要なデータを作ることができる。\n- `ggplot2`パッケージを使って，データの特徴を伝えやすく，シンプルで，美しいグラフを作成することができる。\n\n第5回講義の**到達度検証のための課題**は、以下の通りです。\n\n- 数値，文字列，ファクターを適切に選択したデータを作る。\n- カテゴリー変数を用いて，作表する。\n- `group_by()`や`summarise()`を使って，作図するためのデータを準備する。\n- `ggplot()`で作図する。\n\nここではRの得意とする**データの可視化**(data visualization)について学びます。\nいままで利用してきた`tidyverse`にはグラフ作成のためのパッケージとして`ggplot2`があります。\n本章では，`ggplot2`の使い方を学習し，読者にもデータの特徴を伝えやすく，シンプルで，美しいグラフの作成を目指します。\n\nビッグデータを容易に扱えるようになった昨今において、データの可視化スキルの重要性は高まってきており、以下のような書籍が出版されています。いずれも非常に良い書籍ですので、興味のある方は読んでみてください。\n\n:::{layout-ncol=3}\n![データ分析のためのデータ可視化入門](img/R_Visu_01.jpg)\n\n![Rでできるビジュアル統計学](img/R_Visu_02.jpg)\n\n![Rによるインタラクティブなデータビジュアライゼーション](img/R_Visu_03.jpg)\n:::\n\n1冊目はアメリカで絶賛された可視化本が翻訳されたものです。ソースコードとともに、データの可視化の基本や実例を学べます。\n2冊目は、統計学を可視化という視点で学習する本です。\n3冊目は前の2冊とは若干毛色が異なっており、`Shiny`というPosit社が開発したパッケージを使って、インタラクティブなグラフを作成する方法を学べます。\n\n`ggplot2`を使うために`tidyverse`と`ggthemes`と`patchwork`を読み込みます。まだインストールできていなければ，始めにインストールしておいてください。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-1_fb46007ef85cdb416452de382ad5dc2e'}\n\n```{.r .cell-code}\n# install.packages(\"tidyverse\") # first time only\n# install.packages(\"ggthemes\")\n# install.packages(\"patchwork\")\n```\n:::\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-2_4a200615738b37fe49a17601a260366d'}\n\n```{.r .cell-code}\nlibrary(tidyverse) # とりあえずこれ\nlibrary(ggthemes) # ggplotのテーマ拡張\nlibrary(patchwork) # ggplotの図を並べる\nrequire(fontregisterer) # 日本語フォントの登録\n```\n:::\n\nまた、Macだとggplot2で作図したグラフで日本語が表示されないことがあります。\nそのため、グラフのスタイルを事前に設定しておいて、文字化けを回避します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-3_ac12a5cd72f61587ae27313238362022'}\n\n```{.r .cell-code}\nmystyle <- list ( # mystyleとして設定を保存\n  theme_few(), # ggthemesのテーマ\n  theme(\n    text = element_text(\n      size=16,  #  フォントサイズ\n     family = \"HiraKakuProN-W3\" # ヒラギノフォント\n    )\n  )\n)\n```\n:::\n\n\n## 変数の種類と記述統計\n\nデータには「**カテゴリ変数**」(category variable)と「**量的変数**」(quantitative variable)あるいは「**連続変数**」(continuous variable)があり，それぞれに対して適切なグラフの種類があります。\n\n### カテゴリー変数と量的変数\n\n**カテゴリー変数**(category variable)とは、観測値が属するカテゴリーを表す変数です。\nたとえば、日経産業中分類の「水産」は35、鉱業は37，建設は41ですが、これらの数値は足したり引いたりすることに意味はありません。\n\n**量的変数**(quantitative variable)とは、観測値が数値で表される変数です。\nたとえば、売上高や株価は金額で表されるため、足したり引いたり、平均や分散を計算することに意味があります。\n\nしたがって、手元にあるデータベースの各変数がカテゴリー変数か量的変数かを把握することは極めて重要です。\nRでは自動で両者を区別したりはしてくれないので、データを読み込んだ後に変数の種類を確認し、自分で指定します。\n\n### 練習用データの読み込み {.unnumbered}\n\nここでは、教科書とは違う、企業の財務データを使いながら、データの可視化を学びます。\n財務データが収録された`csv`ファイルを，tidyverseの`read_csv()`関数を使って読み込みます。\n`read_csv()`関数の引数として，ファイルの場所とファイル名を直接パスあるいは相対パスを指定します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-4_ecf2932a38590abbd6dc758f9716953d'}\n\n```{.r .cell-code}\ndf <- read_csv(\"data/RD_2022.csv\")\nglimpse(df) # データの概要\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 57,823\nColumns: 23\n$ 会社コード                     <chr> \"0000001\", \"0000001\", \"0000001\", \"00000…\n$ 企業名                         <chr> \"極洋\", \"極洋\", \"極洋\", \"極洋\", \"極洋\",…\n$ 決算期                         <chr> \"1999/03\", \"2000/03\", \"2001/03\", \"2002/…\n$ 決算種別                       <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,…\n$ 連結基準                       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ 決算月数                       <dbl> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,…\n$ 上場コード                     <dbl> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,…\n$ 日経業種コード                 <dbl> 235341, 235341, 235341, 235341, 235341,…\n$ 現金預金                       <dbl> 6307, 4951, 3818, 4185, 4015, 3456, 277…\n$ 資産合計                       <dbl> 62109, 60885, 60599, 57069, 55373, 5856…\n$ 資本金                         <dbl> 5664, 5664, 5664, 5664, 5664, 5664, 566…\n$ 資本剰余金                     <dbl> NA, NA, NA, NA, 742, 742, 742, 743, 749…\n$ 利益剰余金                     <dbl> 2739, 4238, 4812, 5485, 6254, 6378, 727…\n$ 自己株式                       <dbl> NA, NA, -79, -154, -387, -464, -368, -2…\n$ 売上高                         <dbl> 171944, 171031, 166644, 158006, 162773,…\n$ 経常利益                       <dbl> 1600, 2299, 1947, 2333, 3314, 2895, 335…\n$ 法人税等                       <dbl> 620, 606, 908, 856, 1234, 1302, 1422, 1…\n$ 法人税等調整額                 <dbl> NA, -178, -114, 44, -272, -234, 136, -3…\n$ 親会社株主に帰属する当期純利益 <dbl> -251, 327, 927, 1026, 1122, 1248, 1388,…\n$ 研究開発費IFRS                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ 研究開発費                     <dbl> 210, 201, 190, 179, 197, 212, 201, 193,…\n$ `開発費・試験研究費`           <dbl> 210, 105, 119, 153, 176, 156, 122, 148,…\n$ 現金及び現金同等物の期末残高   <dbl> NA, 4865, 3729, 4097, 3923, 3359, 2725,…\n```\n:::\n:::\n\n\n`23`個の変数があり、データの個数は`57,823`となっています。\n以下ではこのデータを使って、データの可視化を学びます。\n\n### 基本的な統計量の確認\n\nはじめに`summary()`で基本的な統計量を確認します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-5_9389f384862fda83148d7f43dc46900d'}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  会社コード           企業名             決算期             決算種別 \n Length:57823       Length:57823       Length:57823       Min.   :10  \n Class :character   Class :character   Class :character   1st Qu.:10  \n Mode  :character   Mode  :character   Mode  :character   Median :10  \n                                                          Mean   :10  \n                                                          3rd Qu.:10  \n                                                          Max.   :10  \n                                                                      \n    連結基準        決算月数       上場コード    日経業種コード  \n Min.   :1.000   Min.   : 1.00   Min.   :11.00   Min.   :101001  \n 1st Qu.:1.000   1st Qu.:12.00   1st Qu.:11.00   1st Qu.:121204  \n Median :1.000   Median :12.00   Median :11.00   Median :241403  \n Mean   :1.062   Mean   :11.98   Mean   :11.46   Mean   :190751  \n 3rd Qu.:1.000   3rd Qu.:12.00   3rd Qu.:12.00   3rd Qu.:257561  \n Max.   :3.000   Max.   :17.00   Max.   :13.00   Max.   :271704  \n                                                                 \n    現金預金           資産合計             資本金          資本剰余金     \n Min.   :       4   Min.   :       70   Min.   :      1   Min.   :-161917  \n 1st Qu.:    2023   1st Qu.:    14062   1st Qu.:   1198   1st Qu.:    965  \n Median :    5370   Median :    39028   Median :   3363   Median :   2995  \n Mean   :   38172   Mean   :   363536   Mean   :  16481   Mean   :  20259  \n 3rd Qu.:   16467   3rd Qu.:   125705   3rd Qu.:  10090   3rd Qu.:   9927  \n Max.   :68502665   Max.   :303846980   Max.   :3500000   Max.   :4503856  \n NA's   :193        NA's   :44          NA's   :198       NA's   :7714     \n   利益剰余金          自己株式            売上高            経常利益      \n Min.   : -972773   Min.   :-3306037   Min.   :       1   Min.   :-869562  \n 1st Qu.:    2250   1st Qu.:   -1368   1st Qu.:   13366   1st Qu.:    425  \n Median :    9163   Median :    -279   Median :   38209   Median :   1626  \n Mean   :   75680   Mean   :   -5144   Mean   :  237440   Mean   :  14070  \n 3rd Qu.:   34436   3rd Qu.:     -39   3rd Qu.:  127091   3rd Qu.:   6126  \n Max.   :26453126   Max.   :      -1   Max.   :31379507   Max.   :5670456  \n NA's   :299        NA's   :10800      NA's   :27         NA's   :21       \n    法人税等       法人税等調整額       親会社株主に帰属する当期純利益\n Min.   : -21709   Min.   :-1139009.0   Min.   :-1708029              \n 1st Qu.:    159   1st Qu.:    -134.5   1st Qu.:     163              \n Median :    586   Median :      -7.0   Median :     823              \n Mean   :   4827   Mean   :    -114.7   Mean   :    7707              \n 3rd Qu.:   2170   3rd Qu.:      91.0   3rd Qu.:    3372              \n Max.   :1190782   Max.   : 1097414.0   Max.   : 4987962              \n NA's   :391       NA's   :3736         NA's   :29                    \n 研究開発費IFRS     研究開発費      開発費・試験研究費\n Min.   :    48   Min.   :      1   Min.   :     1    \n 1st Qu.:  2440   1st Qu.:    131   1st Qu.:   169    \n Median : 24628   Median :    547   Median :   651    \n Mean   : 91248   Mean   :   8441   Mean   :  7528    \n 3rd Qu.:108096   3rd Qu.:   2330   3rd Qu.:  2710    \n Max.   :806905   Max.   :1124262   Max.   :662610    \n NA's   :57583    NA's   :21525     NA's   :38296     \n 現金及び現金同等物の期末残高\n Min.   :    -292            \n 1st Qu.:    1913            \n Median :    5328            \n Mean   :   39185            \n 3rd Qu.:   16954            \n Max.   :68419223            \n NA's   :1591                \n```\n:::\n:::\n\n\n文字列となっている変数以外の量的変数については、最小値、第1四分位、中央値、平均値、第3四分位、最大値、欠損値の数、といった項目が計算されています。\n数値データのうち、カテゴリー変数の統計量については意味が無いです。\n\n23個の変数の型を確認すると、大部分の財務データは数値`<dbl>`ですが、\n\n- 会社コード\n- 企業名\n- 決算期\n\nの3つは文字列`<chr>`となっています。\nまた、数値となっているけれど、実際はカテゴリー変数であるものとして、\n\n- 決算種別 : `10 = 本決算`\n- 連結基準 : `1 = 日本基準`, `2 = 米国基準`, `3 = IFRS`, `0 = 単独`\n- 上場コード : `11 = 東証1部`, `12 = 東証2部`, `13 = 東証マザーズ`,\n- 日経業種コード : 後で説明あり\n\nがあります。\n文字列となっている変数以外の量的変数については、最小値、第1四分位、中央値、平均値、第3四分位、最大値、欠損値の数、といった項目が計算されています。\n数値データとなっているカテゴリー変数である決算種別，連結基準，上場コード，日経業種コードの統計量も計算されていますが，もちろん意味は無いので，Rにカテゴリー変数であることを明示するためにファクター型に変換する必要があります。\n\nとりあえず、数値データのうち、カテゴリー変数ではないものについて、統計量を計算してみます。\n主要な統計量を返す関数には以下のものがあります。\n\n- `mean()` : 算術平均を計算する\n- `median()` : 中央値を計算する\n- `sd()` : (不偏)標準偏差を計算する\n- `var()` : (不偏)分散を計算する\n- `min()` : 最小値を計算する\n- `max()` : 最大値を計算する\n\nでは、売上高の平均を計算してみましょう。\nデータフレーム`df`の売上高にアクセスするには、`df$売上高`のように、`$`を使って変数名を指定します。\nExcelでいうと，`df`がシート名，`売上高`が列名に相当します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-6_46fe831c0d2eaf3bb6b0b136487e858f'}\n\n```{.r .cell-code}\nmean(df$売上高)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n`NA`が帰ってきましたね。\n実は、この`mean()`関数は、引数となるベクトル変数の中に欠損値`NA`があると、`NA`を返します。\n欠損値を意味する`NA`は，その観測値が存在しないことを表します。\nこのような場合、`NA`を除外して平均を計算する必要があるので、`na.rm = TRUE`という引数を追加します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-7_4140ba83087814b939f43d722ca93510'}\n\n```{.r .cell-code}\nmean(df$売上高, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 237440.1\n```\n:::\n:::\n\nこれで、売上高の平均が2.3744011\\times 10^{5}となりました。\n\n同じように、\n\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-8_f8b7b4349a1a84389f748b23e9516c2e'}\n\n```{.r .cell-code}\nmedian(df$売上高, na.rm = TRUE) # 中央値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 38209\n```\n:::\n\n```{.r .cell-code}\nsd(df$売上高, na.rm = TRUE) # 標準偏差\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 938244.4\n```\n:::\n:::\n\nとすることで、中央値と標準偏差が求められます。\n\n### カテゴリ変数の内容確認\n\nカテゴリー変数について見ていきましょう。\nここでは日経業種コードを例にとります。\n日経業種コードは6ケタの数字ですが、最初の1ケタが大分類、次の2ケタ目が中分類、最後の3ケタ目が小分類を表します。つまり`1 + 32 + 344`のような構造になっています。\n実証会計研究では、産業中分類をよく使うので、ここでは中分類を抽出してみましょう。\nまたしても`substr()`関数を使って、2〜3ケタ目を抽出し、`中分類`という変数に格納します。\nついでに，`決算期`のデータが`YYYY/MM`という形式になっているので，最初の4桁を抽出して，`年度`という変数に格納します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-9_0bcf55be3a57d2e2919c2dd869ab13bc'}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(\n    中分類 = substr(日経業種コード, 2, 3), #2〜3ケタ目を抽出\n    年度 = substr(決算期, 1, 4) # 最初の4桁を抽出\n    )\n```\n:::\n\n\nこの中分類の内容を確認するには、`table()`関数を使います。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-10_6a51136e699951b066192a0d879c2f70'}\n\n```{.r .cell-code}\ntable(df$中分類) # 中分類の表\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   01    03    05    07    09    11    13    15    17    19    21    23    25 \n 2215   934   432  3915   947   178   459  1066   906  2174  4338  5016    96 \n   27    29    31    33    35    37    41    43    45    52    53    55    57 \n 1651   253  1035  1936   203   131  2715  5926  3501   832  1674   670   640 \n   59    61    63    65    67    69    71 \n  261    96   746   625   285   214 11753 \n```\n:::\n:::\n\n\nこのように、中分類ごとの企業数が計算されました。\nこのカテゴリー変数の型を`class()`関数で確認します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-11_51a523f61b1993c70b81d5e5759bf0d1'}\n\n```{.r .cell-code}\nclass(df$中分類) # 中分類の型\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n`character`つまり文字列となっています。これをファクター型に変えて、カテゴリー変数であることを明示します。`as.factor()`関数を使うと、ファクター型に変換できますが，産業コードだけだとどの産業なのか分かりづらいままです。\nそこで、`factor()`関数を使って、カテゴリー変数の内容を指定します。\nついでに，上場コードや連結基準もファクター型に変換しておきます。\n\nまずどんな中分類があるのかを確認します。\nある変数にどんなカテゴリーがあるのかを確認するには、`unique()`関数を使います。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-12_71d29652986ce60cee3193b26851d982'}\n\n```{.r .cell-code}\nchu_level <- sort(unique(df$中分類)) # 中分類のカテゴリーを抽出\n```\n:::\n\n\nこの中分類コードに対応する産業名称を指定するには，`factor()`関数の引数として，`levels =`と`labels =`を指定します。\n以下では，`mutate()`と組み合わせて，`中分類`をファクター型に変換します。\n\n産業名称をベクトルとして収納しておきます。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-13_3da610fdf905eb9e971ea929c821149c'}\n\n```{.r .cell-code}\nchu_name <- c(\n  \"食品\",\"繊維\",\"パルプ・紙\",\"化学工業\",\"医薬品\",\"石油\",\"ゴム\",\"窯業\",\"鉄鉱業\",\"非金属及び金属製品\",\"機械\",\"電気機器\",\"造船\",\"自動車・自動車部品\",\"その他輸送用機器\",\"精密機器\",\"その他製造業\",\"水産\",\"鉱業\",\"建設\",\"商社\",\"小売業\",\"その他金融業\",\"不動産\",\"鉄道・バス\",\"陸運\",\"海運\",\"空輸\",\"倉庫・運輸関連\",\"通信\",\"電力\",\"ガス\",\"サービス業\")\n```\n:::\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-14_04583a9b4fa7f36218ea3628940e6b6f'}\n\n```{.r .cell-code}\ndf <- df %>%\n  arrange(中分類) %>%\n  mutate(\n    中分類 = factor( # 中分類をファクター型に変換\n      中分類,\n      levels = chu_level, # カテゴリーの種類\n      labels = chu_name), # カテゴリーの名称\n    上場コード = factor(\n      上場コード,\n      levels = c(11,12,13), # カテゴリーの種類\n      labels = c(\"1部\",\"2部\",\"マザーズ\")), # カテゴリーの名称\n    連結基準 = factor(\n      連結基準,\n      levels = c(1,2,3,0),\n      labels = c(\"日本基準\",\"米国基準\",\"IFRS\",\"単独\"))\n      )\n```\n:::\n\n\nカテゴリー変数がファクター型に変換されたので，再度`summary()`関数を使って，概要統計量を確認してみましょう。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-15_16095d9673581cf2b51188d225f38b17'}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  会社コード           企業名             決算期             決算種別 \n Length:57823       Length:57823       Length:57823       Min.   :10  \n Class :character   Class :character   Class :character   1st Qu.:10  \n Mode  :character   Mode  :character   Mode  :character   Median :10  \n                                                          Mean   :10  \n                                                          3rd Qu.:10  \n                                                          Max.   :10  \n                                                                      \n     連結基準        決算月数        上場コード    日経業種コード  \n 日本基準:55727   Min.   : 1.00   1部     :33171   Min.   :101001  \n 米国基準:  581   1st Qu.:12.00   2部     :22529   1st Qu.:121204  \n IFRS    : 1515   Median :12.00   マザーズ: 2123   Median :241403  \n 単独    :    0   Mean   :11.98                    Mean   :190751  \n                  3rd Qu.:12.00                    3rd Qu.:257561  \n                  Max.   :17.00                    Max.   :271704  \n                                                                   \n    現金預金           資産合計             資本金          資本剰余金     \n Min.   :       4   Min.   :       70   Min.   :      1   Min.   :-161917  \n 1st Qu.:    2023   1st Qu.:    14062   1st Qu.:   1198   1st Qu.:    965  \n Median :    5370   Median :    39028   Median :   3363   Median :   2995  \n Mean   :   38172   Mean   :   363536   Mean   :  16481   Mean   :  20259  \n 3rd Qu.:   16467   3rd Qu.:   125705   3rd Qu.:  10090   3rd Qu.:   9927  \n Max.   :68502665   Max.   :303846980   Max.   :3500000   Max.   :4503856  \n NA's   :193        NA's   :44          NA's   :198       NA's   :7714     \n   利益剰余金          自己株式            売上高            経常利益      \n Min.   : -972773   Min.   :-3306037   Min.   :       1   Min.   :-869562  \n 1st Qu.:    2250   1st Qu.:   -1368   1st Qu.:   13366   1st Qu.:    425  \n Median :    9163   Median :    -279   Median :   38209   Median :   1626  \n Mean   :   75680   Mean   :   -5144   Mean   :  237440   Mean   :  14070  \n 3rd Qu.:   34436   3rd Qu.:     -39   3rd Qu.:  127091   3rd Qu.:   6126  \n Max.   :26453126   Max.   :      -1   Max.   :31379507   Max.   :5670456  \n NA's   :299        NA's   :10800      NA's   :27         NA's   :21       \n    法人税等       法人税等調整額       親会社株主に帰属する当期純利益\n Min.   : -21709   Min.   :-1139009.0   Min.   :-1708029              \n 1st Qu.:    159   1st Qu.:    -134.5   1st Qu.:     163              \n Median :    586   Median :      -7.0   Median :     823              \n Mean   :   4827   Mean   :    -114.7   Mean   :    7707              \n 3rd Qu.:   2170   3rd Qu.:      91.0   3rd Qu.:    3372              \n Max.   :1190782   Max.   : 1097414.0   Max.   : 4987962              \n NA's   :391       NA's   :3736         NA's   :29                    \n 研究開発費IFRS     研究開発費      開発費・試験研究費\n Min.   :    48   Min.   :      1   Min.   :     1    \n 1st Qu.:  2440   1st Qu.:    131   1st Qu.:   169    \n Median : 24628   Median :    547   Median :   651    \n Mean   : 91248   Mean   :   8441   Mean   :  7528    \n 3rd Qu.:108096   3rd Qu.:   2330   3rd Qu.:  2710    \n Max.   :806905   Max.   :1124262   Max.   :662610    \n NA's   :57583    NA's   :21525     NA's   :38296     \n 現金及び現金同等物の期末残高        中分類          年度          \n Min.   :    -292             サービス業:11753   Length:57823      \n 1st Qu.:    1913             商社      : 5926   Class :character  \n Median :    5328             電気機器  : 5016   Mode  :character  \n Mean   :   39185             機械      : 4338                     \n 3rd Qu.:   16954             化学工業  : 3915                     \n Max.   :68419223             小売業    : 3501                     \n NA's   :1591                 (Other)   :23374                     \n```\n:::\n:::\n\n\nカテゴリー変数はカテゴリーの種類と個数が表示されています。\n\n### 2つのカテゴリー変数の関係を確かめる\n\n2つの変数から表を作成する方法について学びます。\n典型的な表として，2変数のクロス集計表があります。\n例えば，連結基準，つまり企業が採用している会計基準の種類と，上場コード，つまり企業が上場している市場の種類，の2変数について，それぞれのカテゴリーごとの企業数を計算することができます。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-16_dce41bbfa83d8ff87e5f1496ba706f61'}\n\n```{.r .cell-code}\ntable(df$連結基準, df$上場コード)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          \n             1部   2部 マザーズ\n  日本基準 31290 22432     2005\n  米国基準   580     0        1\n  IFRS      1301    97      117\n  単独         0     0        0\n```\n:::\n:::\n\n\n圧倒的に，日本基準で上場している企業が多いことがわかります。\n2020年度のデータだけを抽出して，同じようにクロス集計表を作成してみましょう。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-17_bfe5a35f99efdd3cb38e81634beee0a9'}\n\n```{.r .cell-code}\ndf %>%\n  filter(年度 == 2020) %>%\n  with(table(連結基準, 上場コード))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          上場コード\n連結基準  1部  2部 マザーズ\n  日本基準 1474 1177      259\n  米国基準   11    0        0\n  IFRS      194   15       22\n  単独        0    0        0\n```\n:::\n:::\n\n東証1部に上場している企業に注目すると，日本基準採用企業が1474社，米国基準採用企業が11社，IFRS採用企業が194社となっていることがわかりました。\n\nこのように，`table()`関数の引数として2つのカテゴリー変数を指定すると，そこから$2 \\times 2$のグループに属する企業数を計算し，表を作成してくれます。\n\nここで急に登場した`with()`関数ですが，`with()`関数は主として次の2つの引数をとります。\n\n1. データ\n2. 式\n\n例えば，先の表を作る場合を考えてみましょう。\n普通に書くと\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-18_986ed9ed06a743aaccc6372646464ee7'}\n\n```{.r .cell-code}\ntable(df$連結基準, df$上場コード)\n```\n:::\n\nとかきましたが，何度も`df$`を書くことが面倒なので，`with()`関数を使って\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-19_18a848db42384eaf6c3b0df32d273e3b'}\n\n```{.r .cell-code}\nwith(df, table(連結基準, 上場コード))\n```\n:::\n\n\nと，第1引数に`df`を指定すれば，第2引数の式の中で`df$`を書く必要がなくなります。したがって，パイプ演算子を使って，\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-20_a1da468e9c7849bd96e3cc9586cfc9a2'}\n\n```{.r .cell-code}\ndf %>% with(table(連結基準, 上場コード))\n```\n:::\n\nと処理をつなげることができます。\n便利ですね。\n\n### カテゴリー別に量的変数の値を調べる\n\n次は，量的変数をカテゴリーごとに分析したいときがあります。\nたとえば，産業別や年度別に売上高の平均値を知りたい，ということが何度もあります。\n任意のグループごとに処理を繰り返したいときは，`dplyr`パッケージの`group_by()`関数を使います。\n`group_by()`関数は，第1引数にグループ化したい変数を指定します。\n\nそして`group_by()`関数と同時に使うことで，グループごとの統計量を計算するために便利なのが`dplyr`パッケージの`summarize()`関数です。\n`summarize()`関数は，次のような引数をとり，各種統計量を計算してくれます。\n\n- `mean =` : 平均\n- `median =`  : 中央値\n- `sd =` : 標準偏差\n- `var =` : 分散\n- `n()` : グループごとの観測値の個数\n\n例えば，上場場所ごとに売上高の平均値を計算するには，次のようにします。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-21_4a4e728fdb93e028809393a906a005de'}\n\n```{.r .cell-code}\ndf %>%\n  group_by(上場コード) %>% # 上場場ごとに\n  summarize(\n    企業数 = n(), #\n    平均売上高 = mean(売上高, na.rm = TRUE) # 平均\n    ) %>%\n  ungroup() %>% # グループ化解除\n  knitr::kable(booktabs = TRUE) # 表を作成\n```\n\n::: {.cell-output-display}\n|上場コード | 企業数| 平均売上高|\n|:----------|------:|----------:|\n|1部        |  33171| 393156.220|\n|2部        |  22529|  29884.533|\n|マザーズ   |   2123|   5459.012|\n:::\n:::\n\n\n結果を見れば分かるとおり，`group_by()`で上場場所ごとにグループ化し，`summarize()`で企業数と平均売上高を計算しているので，上場場所，企業数，平均売上高の3変数が3つの観測値をもつ$3 \\times 3$の表が作成されています。\n`group_by()`と`summarize()`を組み合わせると，結果としてグループ数に応じた統計量を計算した結果となり，元のデータよりも小さなデータフレームとなって返ってきます。\n\nついでに，産業別の売上高合計，利益平均値，利益中央値，利益の標準偏差を計算してみましょう。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-22_e8e598f673b313a0a1af2af88e798580'}\n\n```{.r .cell-code}\ndf %>%\n  group_by(中分類) %>% # 産業中分類ごとに\n  summarize(\n    企業数 = n(), # n()で要素数\n    売上合計 = sum(売上高, na.rm = TRUE), # 合計\n    利益平均値 = mean(親会社株主に帰属する当期純利益, na.rm = TRUE), # 平均\n    利益中央値 = median(親会社株主に帰属する当期純利益, na.rm = TRUE), # 中央値\n    利益標準偏差 = sd(親会社株主に帰属する当期純利益, na.rm = TRUE) # 標準偏差\n    ) %>%\n  arrange(desc(売上合計)) %>% # 売上合計で降順に並び替え\n  ungroup() %>% # グループ化解除\n  knitr::kable(booktabs = TRUE) # 表を作成\n```\n\n::: {.cell-output-display}\n|中分類             | 企業数|   売上合計| 利益平均値| 利益中央値| 利益標準偏差|\n|:------------------|------:|----------:|----------:|----------:|------------:|\n|電気機器           |   5016| 1941560030|  10167.927|     1084.0|    62674.007|\n|商社               |   5926| 1909721701|   6754.815|      738.0|    43249.527|\n|自動車・自動車部品 |   1651| 1688864541|  39250.629|     1851.0|   210604.044|\n|小売業             |   3501|  793035711|   4590.688|      880.0|    14968.112|\n|化学工業           |   3915|  736860746|   7564.608|     1445.0|    23530.649|\n|サービス業         |  11753|  694250494|   2578.502|      361.0|    17729.118|\n|通信               |    625|  647052927|  67415.843|     3040.0|   284105.640|\n|機械               |   4338|  616584704|   5310.454|     1007.0|    20211.162|\n|建設               |   2715|  597371111|   4868.903|     1073.5|    22122.402|\n|食品               |   2215|  553185961|   8370.878|     1211.0|    32427.752|\n|電力               |    285|  435223159|  24108.284|    21988.0|   127809.199|\n|非金属及び金属製品 |   2174|  333425028|   3537.316|      704.0|    15694.021|\n|鉄道・バス         |    670|  309477897|  16710.421|     3660.0|    61053.123|\n|鉄鉱業             |    906|  306858163|   8887.185|      903.0|    47067.285|\n|石油               |    178|  247483911|  14830.657|     1510.5|    81496.356|\n|医薬品             |    947|  199368660|  20915.376|     4157.0|    48451.048|\n|その他製造業       |   1936|  189462230|   2630.949|      595.0|     8999.953|\n|不動産             |   1674|  181588397|   5826.409|     1192.0|    20315.917|\n|窯業               |   1066|  145506672|   4485.089|      909.5|    13623.277|\n|その他金融業       |    832|  142861287|   9388.689|     1657.5|    47428.745|\n|ゴム               |    459|  133429682|  12362.357|     1381.0|    43652.986|\n|精密機器           |   1035|  132220025|   6338.030|     1015.0|    17597.021|\n|陸運               |    640|  118243116|   4662.080|     1285.5|     9675.867|\n|繊維               |    934|  115700455|   2405.079|      542.0|    10837.288|\n|海運               |    261|  104869365|  15152.031|     1012.0|    93497.186|\n|パルプ・紙         |    432|  100989604|   3345.630|      693.5|     9869.195|\n|ガス               |    214|   89266508|  16210.327|     3620.0|    26366.794|\n|空輸               |     96|   70396355|  13813.062|     1053.0|   105853.201|\n|造船               |     96|   50404788|   4001.927|      968.5|    18613.163|\n|倉庫・運輸関連     |    746|   48088368|   1876.247|      622.0|     3991.522|\n|水産               |    203|   35003357|   2327.473|     1122.0|     4202.917|\n|その他輸送用機器   |    253|   27993041|   4227.802|     1102.0|    12600.550|\n|鉱業               |    131|   26740727|  15827.588|     2096.0|    46860.380|\n:::\n:::\n\n\n\n次のグラフ作成のためのデータを作成するため，年度別ごとに，ROEの平均値を計算し，その結果を`df_year`という変数に代入します。\nROEは，ある年度の`親会社に帰属する当期純利益`を期首株主資本で割った値です。\n株主資本は，資本金と資本剰余金，利益剰余金，自己株式の合計で計算しますが，欠損値になっている会社もあるので，`replace_na()`関数を使って欠損値にはゼロを代入します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-23_c997c35507a545143864d3fbd80d3a9c'}\n\n```{.r .cell-code}\ndf <- df %>%\n  replace_na(list(資本剰余金 = 0, 利益剰余金 = 0, 自己株式 = 0)) %>% # 欠損値をゼロに置き換え\n  group_by(企業名) %>% # 会社ごとに\n  mutate( # 新変数作成\n    株主資本 = 資本金 + 資本剰余金 + 利益剰余金 + 自己株式, # 株主資本を計算\n    ) %>%\n    filter(株主資本 >0 ) %>% # 株主資本がマイナスの企業を除外\n  mutate(\n    ROE = 親会社株主に帰属する当期純利益 / lag(株主資本) # ROEを計算\n    ) %>%\n  ungroup() # グループ化解除\n\ndf_year <- df %>%\n  group_by(年度) %>% # 年ごとに\n  summarize( # 統計量を計算\n    平均ROE = mean(ROE, na.rm = TRUE)\n    ) %>%\n  ungroup() # グループ化解除\n```\n:::\n\n\nこれで，年度ごと，上場場所ごとに，平均ROEを計算したデータフレーム`df_year`ができました。\n\nここで注意しなければならない点として，`group_by(企業名)`とした上で，`lag()`関数を使っている点です。\n`lag()`関数は，引数として指定した変数の値の1つ前の値に変換します。\nしたがって，`group_by()`を使わないと次のような結果になります。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-24_ae611d53d9105271fa23ccf025bb6568'}\n::: {.cell-output-display}\n|企業名               |年度 | 親会社株主に帰属する当期純利益| 株主資本|       ROE|\n|:--------------------|:----|------------------------------:|--------:|---------:|\n|ニップン             |2020 |                           8941|   129587| 0.0723101|\n|ニップン             |2021 |                           8636|   135597| 0.0666425|\n|ニップン             |2022 |                           9327|   142166| 0.0687847|\n|日清製粉グループ本社 |1999 |                           7327|   156543| 0.0515383|\n|日清製粉グループ本社 |2000 |                          10822|   175112| 0.0691312|\n|日清製粉グループ本社 |2001 |                          11136|   177671| 0.0635936|\n:::\n:::\n\n\nここで問題になっているのが，日清製粉グループ本社の1999年のROEが計算されている点である。\nROEは分子に親会社株主に帰属する当期純利益，分母に**期首**株主資本，つまりは前期末の株主資本を使います。\nしたがって，1999年のROEを計算するためには，1998年の株主資本を使う必要がありますが，データは1999年からしか存在しないので欠損値にならないといけないのに，計算されてしまっています。\nつまり，一つ上のニップンの2022年の株主資本のデータを使っているのです。\nそこで，`group_by()`により企業ごとにグループ化して，`lag()`関数を使って，一つ前の観測値を使うようにし，1999年のROEは欠損値になるようにします。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-25_e6e351366824e0befc4f1ba012e0c98a'}\n::: {.cell-output-display}\n|企業名               |年度 | 株主資本|       ROE|\n|:--------------------|:----|--------:|---------:|\n|ニップン             |2020 |   129587| 0.0723101|\n|ニップン             |2021 |   135597| 0.0666425|\n|ニップン             |2022 |   142166| 0.0687847|\n|日清製粉グループ本社 |1999 |   156543|        NA|\n|日清製粉グループ本社 |2000 |   175112| 0.0691312|\n|日清製粉グループ本社 |2001 |   177671| 0.0635936|\n:::\n:::\n\n## 変数の可視化・視覚化\n\nカテゴリー変数のファクター化，`with()`関数と`table()`関数を使ったクロス集計表の作成，`group_by()`関数と`summarize()`関数を使ったグループごとの統計量の計算について学んだので，これらの結果を使ってグラフを作ることで，読者に伝わるデータの可視化を行いたいと思います。\nキレイなグラフを比較的簡単に作ることができる`ggplot2`パッケージを使います。\n\n### `ggplot()`関数の基本的な使い方と変数の特徴把握\n\n`ggplot2`パッケージの`ggplot()`関数は，次のような引数をとります。\n\n- `data =` : データフレーム\n- `mapping = aes()` : グラフの構成要素を指定する関数\n- `geom_***` : グラフの種類を指定する関数\n- 各種オプション\n\n最初の注意点として，`ggplot()`関数は，第1引数`data =`で`tibble`か`data.frame`を指定する必要があります。\nデータの型に気をつけましょう。\n\n\nでは，年度ごとに平均ROEを示した折れ線グラフを作図していきます。\nまず土台となるデータフレームを指定します。\n\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-26_0c13b54384302ef5787bc7bb10ff5726'}\n\n```{.r .cell-code}\nggplot(data = df_year)\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-26-1.png){width=1344}\n:::\n:::\n\n\n土台ができましたが，まだ何も表示されていません。\n次に，グラフの構成要素を指定するために，`mapping = aes()`で，軸を指定します。\n今回は，横軸に年度，縦軸に平均ROEを指定します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-27_292ad0135c0b75b4b7922c41e0601294'}\n\n```{.r .cell-code}\nggplot(data = df_year, mapping = aes(x = 年度, y = 平均ROE))\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-27-1.png){width=1344}\n:::\n:::\n\n縦軸と横軸が表示されました。\n軸のラベルが文字化けしているので，最初に作成しておいたスタイル`mystyle`を適用します。\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-28_41065895cf06506fd8aa5e7b3180f9bf'}\n\n```{.r .cell-code}\nggplot(data = df_year, mapping = aes(x = 年度, y = 平均ROE)) + mystyle\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-28-1.png){width=1344}\n:::\n:::\n\n次に，グラフを作成するために，`geom_line()`関数を使います。\n`ggplot`関数では，次のような`geom_***()`関数を使って，グラフの種類を指定します。\n\n- `geom_point()` : 散布図\n- `geom_line()` : 折れ線グラフ\n- `geom_bar()` : 棒グラフ\n- `geom_boxplot()` : 箱ひげ図\n- `geom_histogram()` : ヒストグラム\n- `geom_density()` : カーネル密度推定図\n- `geom_violin()` : バイオリンプロット\n- `geom_smooth()` : 平滑化曲線\n\nここでは横軸が`年度`という文字列，縦軸が`平均ROE`という量的変数となるグラフを作るので，`geom_bar()`を使います。\n\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-29_b1df8a1528148e6b16ea0026073acbcf'}\n\n```{.r .cell-code}\nggplot(data = df_year, mapping = aes(x = 年度, y = 平均ROE)) +\n  geom_bar(stat = \"identity\") + mystyle\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-29-1.png){width=1344}\n:::\n:::\n\n\n横軸が順序に意味のある変数であれば，`geom_line()`で折れ線グラフを作るほうが良いでしょう。\nこの場合，`年度`は文字列ですが，本来は順序に意味のあるカテゴリー変数ですので，`factor()`関数を使って，ファクター型に変換します。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-30_c71c90b36d9f55456e0d2b0597daf8ba'}\n\n```{.r .cell-code}\ndf_year <- df_year %>%\n  mutate(年度f = factor(年度,\n  levels = c(1999:2022),\n  ordered = TRUE))\n```\n:::\n\n\n横軸が順序付きのファクターの`年度f`となったので，`geom_line()`を使って折れ線グラフを作成します。\nここで，オプションとして，`group = 1`を指定して，データ全体が1つのグループであることを明示します。\n横軸がファクター型であるときは，`group = 1`をつける，というおまじないを覚えておきましょう。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-31_c053348f8abe43fdf569d2f2b9c0286c'}\n\n```{.r .cell-code}\nggplot(data = df_year, mapping = aes(x = 年度f, y = 平均ROE, group = 1)) +\n  geom_line() + geom_point() + xlab(\"年度\") + ylab(\"平均ROE\") + mystyle\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-31-1.png){width=1344}\n:::\n:::\n\n\n上のコードは，必要な引数を省略せずに書きましたが，省略できるものを省略しつつ，\nすべての要素を$+$でつなぐよりも，レイヤーごとに代入していくほうが，コードが読みやすくなります。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-32_bfc7624fca90f45ae160ec0ba78396c5'}\n\n```{.r .cell-code}\ng <- ggplot(df_year) + aes(年度f, 平均ROE, group = 1) # 基本要素\ng <- g + geom_line() + geom_point() # 折れ線グラフと散布図\ng <- g + xlab(\"年度\") + ylab(\"平均ROE\") + mystyle # 見た目の調整\nprint(g)\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-32-1.png){width=1344}\n:::\n:::\n\n\n### ヒストグラム\n\n次に，前年度のROEのヒストグラムを作成してみましょう。\n\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-33_8c002fee5e8e8ea90c099f4aa6c0ed36'}\n\n```{.r .cell-code}\ng <- ggplot(df) +\n  aes(ROE) + # 1変数 ROE を指定\n  geom_histogram(fill=\"skyblue\", color = \"black\") + # ヒストグラム\n  xlim(-1,1) + mystyle # x軸の範囲とスタイルを指定\nprint(g)\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-33-1.png){width=1344}\n:::\n:::\n\n\n### 箱ひげ図とバイオリンプロット\n\n次に，上場場所別ROEの分布を箱ひげ図とバイオリンプロットで比較してみましょう。\n箱ひげ図は，`geom_boxplot()`を使います。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-34_f94ba7d58f7c573f6a21e4132e2a8681'}\n\n```{.r .cell-code}\ng <- ggplot(df) + aes(x = factor(上場コード), y = ROE) + geom_boxplot() + mystyle\nprint(g)\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-34-1.png){width=1344}\n:::\n:::\n\n\nROEのばらつきが大きく，極端にROEが大きかったり小さかったりする異常値のせいで，箱ひげ図がうまく描写されていません。\nそこで異常値を除外するため，ROEの範囲を$[-0.5,0.5]$に限定してみましょう。\n先ほど箱ひげ図を作成するために作ったオブジェクト`g`に`ylim()`を追加して，Y軸の範囲を指定します。\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-35_e27339d8c2ac14611dce96e80aa7bccd'}\n\n```{.r .cell-code}\ng <- g + ylim(-.5,.5) # y軸の範囲を指定\nprint(g)\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-35-1.png){width=1344}\n:::\n:::\n\n箱ひげ図の箱の下辺は第1四分位(Q1)で，上辺は第3四分位(Q3)です。\n真ん中の太い横棒は中央値です。 箱から出ているひげはデータの四分位範囲を超えた値の範囲ですが，黒丸は外れ値を表しています。\n\n次に，バイオリンプロットを作成します。\nバイオリンプロットもほぼ箱ひげ図と同じですが，`geom_violin()`を使います。\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-36_6cd2c77568999927e90f8352f936c1da'}\n\n```{.r .cell-code}\ng <- ggplot(df) + aes(x = factor(上場コード), y = ROE)\ng <- g + geom_violin() + ylim(-.5,.5) + mystyle\nprint(g)\n```\n\n::: {.cell-output-display}\n![](presemi2023_05_files/figure-html/unnamed-chunk-36-1.png){width=1344}\n:::\n:::\n\n\n箱ひげ図やバイオリンプロットから，東証1部と東証2部の上場企業のROEは中央値に差があるものの，分布の形は似ていますが，マザーズの企業は，ROEの分布が大きく異なることがわかります。\n\n### 図の保存\n\n最後に，作成した図を保存するには，`ggsave()`関数を使います。\n`ggsave()`関数は，次のような引数をとります。\n\n- `filename =` : 保存するファイル名\n- `plot =` : 保存する図\n- `width =` : 図の幅\n- `height =` : 図の高さ\n- `dpi =` : 解像度\n\n日本語を含まないグラフであったり，Windowsならこれでうまくいくのですが，Macで日本語を含むggplotのグラフを保存するには一手間必要です。\n\n#### Macの場合 {.unnumbered}\n\nMacの場合，`ggsave()`関数を使っても，日本語が文字化けしてしまいます。\nそこで`quartz()`関数を用いて，次のようにすれば，日本語を含むグラフを保存することができます。\n`quartz()`は以下の引数を取ります。\n\n- `filename =` : 保存するファイル名\n- `width =` : 図の幅\n- `height =` : 図の高さ\n- `pointsize =` : フォントサイズ\n- `family =` : フォントファミリー\n- `type =` : ファイルタイプ\n- `antialias =` : アンチエイリアス\n\n\n\n::: {.cell hash='presemi2023_05_cache/html/unnamed-chunk-37_57eda27ce24df7729380972f8498f07d'}\n\n```{.r .cell-code}\nquartz(\"violin_plot.pdf\", width = 10, height = 6, pointsize = 10)\nprint(g)\ndev.off()\n```\n:::\n\nこれで作業ディレクトリに`violin_plot.pdf`が保存されました。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}