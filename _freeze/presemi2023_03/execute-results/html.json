{
  "hash": "8766feeb37ba7a42a4d3c5fc04a46bf6",
  "result": {
    "markdown": "# Rの使い方\n\n第3回講義の**到達目標**は、\n\n- R、Rstudio、Visual Studio Code、Quartoのインストールができる。\n- Posit Cloudにログインして、ブラウザ上でRstudioを使うことができる。\n- Visual Studio CodeでRのソースコードを書くことができる。\n- Visual Studio CodeでQuartoを使って、レポートや論文を書くことができる。\n\n第3回講義の**到達度検証のための課題**は、以下の通りです。\n\n1. Visual Studio Codeで必要な拡張機能をインストールする。\n2. Visual Studio Codeで、Rのソースコードを書いて実行し、結果を見る。\n3. Visual Studio Codeで、Quartoを使って短いレポートを作成する。\n4. Visual Studio Codeで、Quartoを使ってスライド資料を作る。\n\n\n正直、Rの使い方を説明したウェブサイトや書籍、動画はたくさんあります。\nそういったものを見てもらった方が早いです。\n\n## RとRstudio\n\n教科書を見ながらRとRstduioを自分PCにインストールしてください。\n以下のウェブサイトが超参考になります。\n自分のPCのOSに応じて、資料を見ながらインストールしてください。\n\n[矢内先生のウェブサイト](https://yukiyanai.github.io/jp/resources/)\n\nあるいは、Posit Cloudを使ってウェブ上でRstudioを使えるようにしてください。\n\n[Posit Cloud](https://cloud.posit.jp/)\n\n## Visual Studio Codeの使い方\n\nPosit Cloudを使わずに、自分のPCでRを使うことを選択した人は、以下の作業に進みますが、まずは矢内先生のウェブサイトなどを参考に、RとRstudioをインストールはインストールしておいてください。\n\n教科書では、Posit社の**Rstudio**の説明をしていますが、RstudioはR専用のIDE（統合開発環境）で、R以外の言語を書くことはできませんし、少々重たいです。\nそこでここでは、Microsoft社の**Visual Studio Code**を使ってRを書く方法を説明します。\n\nマイクロソフト社のウェブサイトから、自分のPCのOSに合わせて、Visual Studio Codeをインストールしてください。\n\nまずGoogle等で「Visual Studio Code」と検索して、オフィシャルサイトにアクセスします。\n\n![Visual Studio Codeのオフィシャルサイト](./img/vscode01.png){width=80%}\n\nそして、「Visual Studio Codeをダウンロードする」をクリックすると、次のページにいきます。\n\n![Visual Studio Codeのダウンロードページ](./img/vscode02.png){width=80%}\n\nここから自分に合ったOSを選んで、ダウンロードしてください。\n詳しい人なら、下の小さな項目から、適切なものをえらんでください。\nMacBookでM2チップを使っている人は、`Mac`の`Apple silicon`のzipをダウンロードして、Zipファイルを展開してインストールしてください。\n\n\n### Quarto\n\n次に、RstudioやVisual Studio Codeで、レポートや論文を書くためのパッケージである`Quarto`をインストールします。\n`Quarto`はRstudioを作ったPosit社が開発している文書作成システムなので、Rとの相性もばっちりです。\n\nまずGoogle等で「Quarto」と検索して、オフィシャルサイトにアクセスします。\n\n![Quartoのオフィシャルサイト](./img/quarto01.png){width=80%}\n\nそして、「Get Started」をクリックすると、次のページにいきます。\n\n![Quartoのダウンロードページ](./img/quarto02.png){width=80%}\n\nここから自分に合ったOSを選んで、ダウンロードしてください。\n\nここまでで、\n\n- R (本体)\n- Rstudio (R用IDE)\n- Visual Studio Code (R以外の言語も書けるIDE)\n- Quarto (レポートや論文を書くためのパッケージ)\n\nのインストールが完了しました。\n次に、Visual Studio CodeでRのソースコードを書くための準備をします。\n\n\n### VS Codeの準備\n\nVisual Studio Code(以下、VS Code)の準備をします。\nVS Codeを開くと、次のような画面が表示されます。\nVS Codeは、機能を拡張するために、拡張パッケージをインストールすることができます。\nVS Codeを起動して、左のメニューの中の、四角が4つ並んだアイコンをクリックしてください。\n\n![VS Codeの初期画面](./img/vscode03.jpg){width=80%}\n\nVS Codeの左のメニュー上部に拡張パッケージの検索画面が表示されます。\nそこに拡張パッケージの名前を入れて、必要なものをインストールしていきます。\n以下の拡張パッケージは、Rの分析をするために必要あるいは推奨されるものです。\n\n- `Japanese Language Pack for Visual Studio Code` : VS Codeの日本語化\n- `R` : とりあえず入れておく\n- `Quarto` : Quartoを使うために必要\n\nとりあえずこの3つを入れておけば、このプレゼミでは十分です。\n\n![VS Codeの拡張パッケージ](./img/vscode04.jpg){width=80%}\n\n### フォルダを開く\n\nVS Codeでは、分析に使うCSVファイルや、分析のためのRファイル、レポートや論文を書くためのQuartoファイルを、一つのフォルダにまとめておくと便利です。\n分かりやすい場所にフォルダを作成し、好きな名前をつけてください。\n\nVS Codeの上部メニューの中の「ファイル」をクリックして、「フォルダーを開く」をクリックして、先ほど作成したフォルダを選択してください。\nすると、左のメニューにフォルダの中身が表示されます。まだ何も入っていなければ、何も表示されません。\n\nVS Codeではフォルダを指定して開いておくと、そこが作業フォルダとなり、Rは常にそのフォルダの中を参照するようになります。\n\n### Rスクリプトの書き方\n\nではVS Code上でRのソースコードを書いてみましょう。\n新しいファイルを作成するためには、上のメニューから「ファイル」をクリックして、「新しいファイル」をクリックしてください。\n\nするとメニューが表示されその中に「R Document」を選ぶと、Rのソースコードを書くためのファイルが作成されます。\nRのソースコードは拡張子が`.r`というファイルになります。\n拡張子が何か分からないひとは、ググっておいてください。\nWindowsやMacOSでもファイルの拡張子が表示されるように設定しておいてください。\n\n## Rの基本操作\n\nここまでの準備が出来ていれば、画面にRのソースコードを書くためのファイルが表示されているはずです。\n何も書かれていないので、まずは何か書いてみましょう。\nまずは、`1+2`を計算してみます。\n\n::: {.cell hash='presemi2023_03_cache/html/unnamed-chunk-1_d98d3ed1638dfd9967d6e627106a455e'}\n\n```{.r .cell-code}\n1 + 2\n```\n:::\n\nと書いて、その行にカーソルがある状態で、`Ctrl + Enter`を押すと、その行の計算結果が表示されます。\n\n\n::: {.cell hash='presemi2023_03_cache/html/unnamed-chunk-2_6582f3c967de1ad3ccb6fab7c753f01d'}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nあとは教科書をみて、練習しておいてください。\n以下の事ができるようになっていればOKです。\n\n- 四則演算\n- `sqrt()`関数で平方根の計算\n- `c()`関数でベクトルの作成\n- `mean()`関数で平均を計算\n- `seq()`関数で数列の作成\n\n## パッケージ\n\nRはパッケージを使って機能を拡張することができます。\n\n- `install.packages()`関数でパッケージをインストールして、\n- `library()`関数でパッケージを読み込むと、\n\n拡張した機能を使えるようになります。\n教科書やこの資料で使う関数はたくさんあるので、その都度説明しますが、ほぼ必ずつかうのが、`tidyverse`というパッケージ群です。\n\n以下のコードを実行して、`tidyverse`をインストールしてください。\n\n\n::: {.cell hash='presemi2023_03_cache/html/unnamed-chunk-3_1981562b3c3ecc11ffe7d88c39a9874c'}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\") # 最初の一回だけ実行\n```\n:::\n\n\nそして、ほぼ毎回以下のコードを実行して、`tidyverse`を読み込みます。\n\n\n::: {.cell hash='presemi2023_03_cache/html/unnamed-chunk-4_65145c3bd2cfb9fb7fb64cfa61809ade'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nついでに、今後使うであろう次のパッケージもインストールしておいてください。\n\n\n::: {.cell hash='presemi2023_03_cache/html/unnamed-chunk-5_6513a9ee206ebbe9da1c44ec159498a6'}\n\n```{.r .cell-code}\ninstall.packages(\"bloom\") # 結果の整形\ninstall.packages(\"ggthemes\") # グラフの見た目\ninstall.packages(\"modelsummary\") # 回帰結果の作表\ninstall.packages(\"kableExtra\") # 表の整形\ninstall.packages(\"gt\") # 表の整形\ninstall.packages(\"patchwork\") # グラフを並べて表示\n```\n:::\n\n\n### Githubとの連携\n\nGitHubは、Gitというバージョン管理システムを使って、ソースコードのバージョン管理をクラウド上で行うことができる無料サービスです。\n使いこなすには、少々勉強が必要ですが、使えれば非常に有用なので、是非やってみてください。\nVisual Studio CodeはGit/GitHubとの連携も簡単なので、複数人でウェブ開発やプログラミングをする場合には、非常に有益です。\n\nまずは、GitHubのウェブサイトにアクセスし、アカウントを作成してください。\n\n[GitHub](https://github.com/)\n\nそこから先は、書籍やウェブサイトを参考にしてください。\n例えばこんな本が便利です。\n\n:::{layout-ncol=3}\n![GitHubのオススメ本](./img/github_book01.jpg)\n\n![はじめてでもできるGitとGitHubの教科書](./img/github_book02.jpg)\n\n![わかばちゃんと学ぶGit使い方入門](./img/github_book03.jpg)\n:::\n\n### GitHub Copilotを使う\n\nGitHub Copilotは、AIがコードの作成を支援してくれる超便利なツールです。\n学生は無料で利用できるので、プログラミングを学習しようとしている人は、導入の検討をしてみてください。\n\n[GitHub Copilot](https://copilot.github.com/)\n\n## まとめ\n\nここでは、\n\n- Rのインストール\n- Rstudioのインストール\n- VS Codeのインストール\n- Quartoのインストール\n\nを行い、VS Code上での分析・レポート作成環境を整えました。\nまた、ソースコードの書き方や、パッケージのインストール方法、GitHubとの連携方法を学び、GitHub Copilotの紹介をしました。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}