{
  "hash": "655c659854565f60df22e451ecb9e941",
  "result": {
    "markdown": "---\ntitle: |\n  <b>プレゼミ2023</b> </br>\n  <span style=\"color: #282A36;\">第3回 Rの使い方・データ操作・可視化</span>\nauthor: \"Soichi Matsuura\"\nformat:\n  revealjs:\n    theme: [\"default\", \"dracula.scss\"]\n    transition: convex\n    slide-number: true\n    chalkboard: true\n# highlight-style: \"dracula\"\nhighlight-style: github\nexecute:\n  echo: true\n  warning: false\n---\n\n\n## 今日の目標\n\n\n第3回講義の**到達目標**は、\n\n- *Posit Cloud*にログインして、ブラウザ上でRstudioを使うことができる。\n- *Visual Studio Code*で`R`のソースコードを書くことができる。\n- `dplyr`の関数を使ってデータ操作ができる。\n- 新しい変数を作成して、企業平均や年度平均を計算することができる。\n\n# Rを使う理由\n\n## プログラミングの基本\n\nMS Excelでもできることを、なぜ`R`でやるのか、というと、\n\n- 代入 `x <- c(1,2,3)`\n- 関数 `mean(x)`\n- 繰り返し `for(i in 1:10) { print(i) }`\n- 分岐 `if(x > 0) { print(\"+\") } else { print(\"-\") }`\n\nができ、そのプロセスをソースコードとして記録できるからである。\n\n## Rの基本操作\n\n`R`はCUI(command user interface)と呼ばれる、コマンドを打ち込んで操作するタイプのソフトウェアなので、操作はすべてキーボード入力する。\n\nまずは、`1+2`を計算してみます。\n\n\n::: columns\n::: {.column width=\"45%\"}\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-1_2250db7d734efb7b4c8fbceb6ce8a387'}\n\n```{.r .cell-code}\n1 + 2\n```\n:::\n\nと書いて、その行にカーソルがある状態で、`Ctrl + Enter`を押すと、\n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"45%\"}\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-2_000292199a4c3a17ebb32c8d297c35ad'}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\nという計算結果が表示されます。\n:::\n:::\n\n\n## よく使う演算希望\n\n基本的な演算は以下の通りです。\n\n\n- `+`加算，`-`減算, `/`除算, `*`乗算\n- `^`累乗, 2の2乗は`2^2`\n- `sqrt()`関数で平方根の計算\n- `c()`関数でベクトルの作成\n- `mean()`関数で平均を計算\n- `seq()`関数で数列の作成\n\n## パッケージで機能拡張\n\nRはパッケージを使って機能を拡張することができます。\n\n- `install.packages()`関数でパッケージをインストールする。2回目の起動からは必要なし\n- `library()`関数でパッケージを読み込む\n\n必要なパッケージをインストールしてみます。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-3_94e5de1802ef31375393e6cc45af5cd0'}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\") # 最初の一回だけ実行\ninstall.packages(\"knitr\") # 最初の一回だけ実行\ninstall.packages(\"kableExtra\") # 最初の一回だけ実行\n```\n:::\n\n\nパッケージを読みこむ。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-4_e17763d5b1b9a1e5087f8b94788498af'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n```\n:::\n\n\n## 便利なパッケージ達\n\n`R`はフリーウェアで、誰でもパッケージを作って公開することができるため、非常に多くのパッケージが開発されている。\n\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-5_17a1dd91a35491da8300008cb9bde41f'}\n\n```{.r .cell-code}\ninstall.packages(\"bloom\") # 結果の整形\ninstall.packages(\"ggthemes\") # グラフの見た目\ninstall.packages(\"modelsummary\") # 回帰結果の作表\ninstall.packages(\"kableExtra\") # 表の整形\ninstall.packages(\"patchwork\") # グラフを並べて表示\n```\n:::\n\n\nとりあえず、`R`を開いたらすぐ`tidyverse`を読み込んでおけばよい。\n\n## Githubとの連携\n\n- **GitHub**は、Gitというバージョン管理システムを使って、ソースコードのバージョン管理をクラウド上で行うことができる無料サービス\n- 使いこなすには少々勉強が必要ですが、使えれば非常に有用\n- VS CodeはGit/GitHubとの連携も簡単なので、複数人でウェブ開発やプログラミングをする場合には必須\n\nまずは、GitHubのウェブサイトにアクセスし、アカウントを作成してください。\n\n[GitHub](https://github.com/)\n\n## GitHub本\n\n書籍やウェブサイトを参考\n\n:::{layout-ncol=3}\n![GitHubのオススメ本](./img/github_book01.jpg){width=6cm}\n\n![はじめてでもできるGitとGitHubの教科書](./img/github_book02.jpg){width=6cm}\n\n![わかばちゃんと学ぶGit使い方入門](./img/github_book03.jpg){width=6cm}\n:::\n\n## GitHub Copilotを使う\n\n- GitHub Copilotは、AIがコードの作成を支援してくれる超便利なツール\n- 学生は無料で利用できるので、プログラミングを学習しようとしている人は、導入すべし\n\n[GitHub Copilot](https://copilot.github.com/)\n\n\n## 作業ディレクトリ(重要)\n\n- `R`は、**作業ディレクトリ**(working direcotry)というフォルダを指定して、その中のファイルを読み込んだり、そこにファイルを書き出したりする。\n- `R`が現在どのフォルダを作業ディレクトリとしているかは、`getwd()`関数で確認\n- 変更するときは、`setwd()`関数を使い、フォルダの(絶対)パスを指定\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-6_bbc6b323d2fc71b8e8335e6011dce8e9'}\n\n```{.r .cell-code}\ngetwd() # 作業ディレクトリ\n```\n:::\n\n\n## `R`ファイルの作成\n\n- `R`ファイルは、`R`のソースコードを書くためのファイルで拡張子は`.r`\n- RstudioやPosit Cloudでは、`File`メニューから`New File`を選択し、`R Script`を選択すると、新しいファイルが作成される。\n- VS Codeだと、`Ctrl + N`で新しいファイルを作成できる。\n\n作業ディレクトリに`presemi_2023_day3.r`というファイルを作成してください。\n\n## ライブラリの読み込み\n\n:::{.panel-tabset}\n\n## 問題\n\n`tidyverse`パッケージを読み込んでください。\n\n## 解答\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-7_6656690a9ea52ccff2b8cd594b7e139c'}\n\n```{.r .cell-code}\n# install.packages(\"tidyverse\")\nlibrary(tidyverse)\n```\n:::\n\n\n:::\n\n## データの読み込み\n\n::: {.panel-tabset}\n\n## 問題\n\n`https://so-ichi.com/kesho_2023.csv`からデータを読み込んで、`df`オブジェクトに代入し、中身を確認してください。\n\n## 解答\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-8_d998319425c44e24e13345ecf51f6e88'}\n\n```{.r .cell-code}\n# データ読み込み\ndf <- read_csv(\"https://so-ichi.com/kesho_2023.csv\")\nglimpse(df) # オブジェクトの中身を確認\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 130\nColumns: 8\n$ code      <chr> \"0000641\", \"0000641\", \"0000641\", \"0000641\", \"0000641\", \"0000…\n$ name      <chr> \"資生堂\", \"資生堂\", \"資生堂\", \"資生堂\", \"資生堂\", \"資生堂\", …\n$ term      <chr> \"1985/11\", \"1986/11\", \"1987/11\", \"1988/11\", \"1989/03\", \"1990…\n$ shubetsu  <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, …\n$ ren       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ sales     <dbl> 371040, 375294, 378977, 401311, 130654, 456352, 517252, 5532…\n$ netincome <dbl> 14526, 13632, 9014, 9515, 4265, 11362, 15850, 16011, 13290, …\n$ month     <dbl> 12, 12, 12, 12, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1…\n```\n:::\n:::\n\n\n:::\n\n# データ・ハンドリングの準備\n\n## 変数の確認\n\nデータを読み込んだら、まずは変数の確認をします。\n`tidyverse`の`glimpse()`を使うと、変数名だけでなく、変数の型はデータの一部を確認できる。\n\n::: {.cell output-location='column' hash='prezemi_2023_03_presen_cache/revealjs/glimpse_889eab6cadc4c88e0a69c8703406aa1e'}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 130\nColumns: 8\n$ code      <chr> \"0000641\", \"0000641\", \"0000641\", \"0000641\", \"0000641\", \"0000…\n$ name      <chr> \"資生堂\", \"資生堂\", \"資生堂\", \"資生堂\", \"資生堂\", \"資生堂\", …\n$ term      <chr> \"1985/11\", \"1986/11\", \"1987/11\", \"1988/11\", \"1989/03\", \"1990…\n$ shubetsu  <dbl> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, …\n$ ren       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ sales     <dbl> 371040, 375294, 378977, 401311, 130654, 456352, 517252, 5532…\n$ netincome <dbl> 14526, 13632, 9014, 9515, 4265, 11362, 15850, 16011, 13290, …\n$ month     <dbl> 12, 12, 12, 12, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1…\n```\n:::\n:::\n\n\n## 変数名の確認\n\n変数の名前だけを知りたい場合は、`names()`を使う。\n\n\n::: {.cell output-location='column' hash='prezemi_2023_03_presen_cache/revealjs/names_470254728916afd2fdbd1dedcfbd21b0'}\n\n```{.r .cell-code}\nnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"code\"      \"name\"      \"term\"      \"shubetsu\"  \"ren\"       \"sales\"    \n[7] \"netincome\" \"month\"    \n```\n:::\n:::\n\n\n## 変数名の確認\n\n`kesho_2023.csv`には次の変数がある\n\n- `code` : 企業コード (文字列)\n- `name` : 企業名 (文字列)\n- `term` : 決算年月 (文字列)\n- `shubetsu` : 会計基準の種類 (数値)\n- `ren` : 連結か単体 (数値)\n- `sales` : 売上高 (数値)\n- `netincome` : 当期純利益 (数値)\n- `month` : 決算月数 (数値)\n\n## 変数の型\n\n変数の型を知りたい場合は、`str()`を使う。\n\n\n::: {.cell output-location='slide' hash='prezemi_2023_03_presen_cache/revealjs/str_47577911e6822f0a81dee2fd7be09267'}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [130 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ code     : chr [1:130] \"0000641\" \"0000641\" \"0000641\" \"0000641\" ...\n $ name     : chr [1:130] \"資生堂\" \"資生堂\" \"資生堂\" \"資生堂\" ...\n $ term     : chr [1:130] \"1985/11\" \"1986/11\" \"1987/11\" \"1988/11\" ...\n $ shubetsu : num [1:130] 10 10 10 10 10 10 10 10 10 10 ...\n $ ren      : num [1:130] 1 1 1 1 1 1 1 1 1 1 ...\n $ sales    : num [1:130] 371040 375294 378977 401311 130654 ...\n $ netincome: num [1:130] 14526 13632 9014 9515 4265 ...\n $ month    : num [1:130] 12 12 12 12 4 12 12 12 12 12 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   code = col_character(),\n  ..   name = col_character(),\n  ..   term = col_character(),\n  ..   shubetsu = col_double(),\n  ..   ren = col_double(),\n  ..   sales = col_double(),\n  ..   netincome = col_double(),\n  ..   month = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\n## 特定の変数の型\n\n特定の変数の型を知りたい場合は、`class()`を使う。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/class_977856e38e109e86ff9f1871b220f775'}\n\n```{.r .cell-code}\nclass(df$sales)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\n## データフレームの変数を指定する\n\n- データ・フレームの変数を指定するには「`$`」を使う。\n- `df`の中の`netincome`を指定するなら，\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-13_704861cce44b17786864c9d2c3d6467e'}\n\n```{.r .cell-code}\ndf$netincome\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]  14526  13632   9014   9515   4265  11362  15850  16011  13290  14668\n [11]  11382  17507  19152  16868  10332  15293 -45091 -22767  24495  27541\n [21]  -8856  14435  25293  35459  19373  33671  12790  14515 -14685  26149\n [31]  33668  23210  32101  22749  61403  73562 -11660  42439   2812   3430\n [41]    316    665   2337   1719   1860    567   2035   8401   7415   7016\n [51]   8666   9206  10787  12563   9904   8851  12879  16239  16381  15287\n [61]  15058  16683  17127  24463  33560  26981  43121  38216  32731  40511\n [71]  46971  52772  61353  46116  52344  72745   9380  10537  12908  13444\n [81]  17537  17810  20007  20040  20413  22182  23686  24530  27594  24494\n [91]  34714  52147  59426  60274  62462  65358  72180  71140  70527  66561\n[101]  64462  40506  46737  52434  52765  64764  79590 105196 126551 147010\n[111] 153698 148213 126142 109636  23813  -1401   6559   4059   7086   8039\n[121]   6681   7318  10382  14095  16328  27137   8388  19694   4632  11734\n```\n:::\n:::\n\n\nとする。\n\n## データフレームの変数の特定の値を指定する\n\n- データ・フレームの変数の特定の値を指定するには「`[]`」を使う。\n- `df`の中の`netincome`の1行目を指定するなら，\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-14_675fbb4272ff4961fa55df14ebf4ea3e'}\n\n```{.r .cell-code}\ndf$netincome[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14526\n```\n:::\n:::\n\n\nあるいは行と列を指定する。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-15_037d0485d10f75abf689967200f972fe'}\n\n```{.r .cell-code}\ndf[1, \"netincome\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  netincome\n      <dbl>\n1     14526\n```\n:::\n:::\n\n\n\n\n## オブジェクトの主要な型\n\n変数の型は非常に重要\n\n- `character` : 文字列\n- `numeric` : 数値\n- `integer` : 整数\n- `factor` : カテゴリー\n- `logical` : 論理値\n\n## オブジェクトの主要な型\n\n- `data.frame` : データフレーム\n- `tibble` : データフレームの改良版\n- `list` : いろんなものをまとめたもの\n\nプレゼミでは主に`data.frame`を使う。\n\n## データフレーム\n\n- データフレーム(`data.frame`)は、行と列からなる表形式のデータ構造\n- 行は観測単位、列は変数\n- 列はすべて同じ型でなければならない\n- 行は同じ型でなくてもよい\n\n\n## データの型の確認\n\n::: {.panel-tabset}\n\n## 問題\n\n`df`の変数である`term`の型を確認してください。\n\n## 解答\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-16_25d3a687b6bc05eeb95fdb82e59b7b2a'}\n\n```{.r .cell-code}\n# class()で確認\nclass(df$term) # オブジェクトの中身を確認\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n:::\n\n\n\n# データの整形 tidyverse\n\n## `dplyr`パッケージ\n\n`tidyverse`パッケージ群の`dplyr`パッケージが大活躍\n\n- `select()` : 変数を選択する\n- `filter()` : データを抽出する\n- `mutate()` : 変数を追加する\n- `group_by()` : データをグループ化する\n- `summarise()` : データを集計する\n- `arrange()` : データを並び替える\n\n\n## パイプ演算子\n\n- ソースコードを可読性の高いものするために便利なのが**パイプ演算子**\n- パイプ演算子は，**左側のオブジェクトを右側の関数の第一引数に渡す**という処理を行う。\n- パイプ演算子は2種類あって、基本`R`の`|>`と`magrittr`パッケージの`%>%`がある。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-17_05f199ef6911905e40c42831cdb56400'}\n\n```{.r .cell-code}\n(1 + 2) %>% sqrt()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.732051\n```\n:::\n\n```{.r .cell-code}\n(1 + 2) |> sqrt()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.732051\n```\n:::\n:::\n\n\n## パイプ演算子の例\n\n`rnorm()`関数を使って平均0，分散1の標準正規分から100個のデータを作る。\n`rnorm()`関数は3つの引数を取ります。\n\n1. データの個数\n2. 平均\n3. 標準偏差\n\n## 正規分布から標本を取り出す。\n\n`rnorm(100, 0, 1)`は、平均0，分散1の標準正規分布から100個のデータを取り出す。\nパイプ演算子を使うと，\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-18_a94d7a3bc45fb8cd2784b0f73f96b916'}\n\n```{.r .cell-code}\n100 %>% rnorm(mean = 0, sd = 1) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.8803250  0.7118487 -1.1671979 -1.1547904  1.6702170 -0.6218070\n```\n:::\n:::\n\n`rnorm()`関数の第1引数がデータの個数なので，そこに`100`を渡しています。\n\n---\n\nここで平均に値を渡したい場合を考えます。\n`mean`引数は第2引数なので，パイプ演算子では自動で渡してくれません。\nそこで`.`を使って渡す場所を指定してあげます。\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-19_64c2a6fbae86c5a60363bc9c18bdc85c'}\n\n```{.r .cell-code}\n100 %>% rnorm(100, mean =. , sd = 1) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100.81015  99.95458  99.66156 100.07923 100.07481  98.82549\n```\n:::\n:::\n\nこれで平均100，標準偏差1の正規分布から100個のデータを取り出せました。\n\n\n# データ・ハンドリング実践\n\n## 新しい変数を作成する `mutate`\n\n- 新変数の作成には`dplyr`パッケージの`mutate()`関数\n- 先ほど読みこんだデータから，当期純利益を売上高で除して売上高当期純利益率を計算して，`ratio`という変数を作る\n\n:::{.callout-important}\n## mutate()で新変数\n\n`dplyr`パッケージの`mutate()`関数を使う。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-20_aed9148c0ebf4ac9837ef3506ce5d2aa'}\n\n```{.r .cell-code}\ndf <- df %>%\n    mutate( # 新しい変数を作成\n        ratio = netincome / sales # 売上高利益率\n        )\n```\n:::\n\n:::\n\n<!-- ::: {.callout-tip}\n## MS Excelの場合\n\n`I1`のセルに変数名を表す`ratio`と入力する。\nF列の`sale`とG列の`netincome`を使って，`I2`のセルに\n\n`= G2 / F2`\n\nとし，`I2`セルの右下の四角をダブルクリックすると，自動で下のセルにも同じ計算がコピーされる。\n::: -->\n\n## 条件に応じて値を変える `ifelse`\n\n- ある変数の値に応じて異なる値をとる変数を作る\n- `mutate()`関数と`ifelse()`関数を組み合わせる。\n- `ifelse()`関数は次のような引数を取ります。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-21_c6ef93bdcd65f2911ef9eeb5068f19ac'}\n\n```{.r .cell-code}\nifelse(条件, 条件が真のときの値, 条件が偽のときの値)\n```\n:::\n\n\n## 条件に応じて値を変える `ifelse`の例\n\n売上高当期純利益率`ratio`が5%(つまり0.05)以上ならば「高い」，\nそうでなければ「低い」という変数`highlow`を作ってみる。\n\n:::{.callout-important}\n## `mutate()`と`ifelse()`\n\n条件分岐を使って新変数作成\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-22_6c22b0cd26601137ef7704cfc065f6b1'}\n\n```{.r .cell-code}\ndf <- df %>%\n    mutate( # 新しい変数を作成\n        highlow = ifelse(ratio >= 0.05, \"高い\", \"低い\") # 売上高利益率\n        )\n```\n:::\n\n:::\n<!--\n::: {.callout-tip}\n## MS Excelの場合\n`J1`セルに`highlow`と入力する。\n`J2`セルに\n\n` = if(I2 >= 0.05, \"高い\", \"低い\")`\n\nと入力し，`J2`セルの右下の四角をダブルクリックすると，自動で下のセルにも同じ計算がコピーされる。\n:::\n\nExcelだとセルの移動や変数名の入力，計算式の入力，セルのコピーといった作業で，キーボードとマウスを行ったり来たりする必要があり，若干面倒です。 -->\n\n## `mutate()`で変数の値を変える\n\n- `mutate()`関数を使って，長すぎる企業名を短くする。\n- 「ポーラ・オルビスホールディングス」を「ポーラ」と略\n- `name`変数の値が「ポーラ・オルビスホールディング」ならば「ポーラ」という値をとる変数を作成\n\n:::{.callout-important}\n## Rの場合\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-23_8cf08574060bb96e5e5841369552ce11'}\n\n```{.r .cell-code}\ndf <- df %>%\n    mutate( # 新しい変数を作成\n        name = ifelse(\n            name == \"ポーラ・オルビスホールディング\", \"ポーラ\", name) # 企業名\n        )\n```\n:::\n\n:::\n\n## `mutate()`で年度を取り出す。\n\n- `term`変数には，`2020/3`のように年月を表す文字列が入っている。\n- `term`から年度を取り出して，`year`という変数を作成する。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-24_34b3b52df711e1daeddcca8e7fad7a79'}\n\n```{.r .cell-code}\ndf <- df %>%\n  mutate(\n    # 1文字目から4文字目までを取り出す\n    year = substr(term, 1, 4)\n    )\n```\n:::\n\n\n## データを抽出する `filter`\n\nデータを抽出するには，`dplyr`パッケージの`filter()`関数を使います。\n`filter()`関数は，次のような引数を取ります。\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-25_096c0aaf53317430b0e8383730321043'}\n\n```{.r .cell-code}\nfilter(データ, 条件)\n```\n:::\n\n\n## データを抽出する `filter`の例\n\n先ほど作成した`highlow`が「高い」企業だけを抽出する。\n\n- `filter()`関数の中の条件は，`==`を使って，`\"高い\"`という文字列と一致するかどうかを確認\n- `highlow`変数の値が`\"高い\"`と一致する企業だけを抽出し，`df_high`という変数に代入\n\n:::{.callout-important}\n## `filter()`の例\n\n一致は`==`を使う。`=`だとエラーが出るので注意\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-26_a5773e7ec46e3e8fc21c40260e9c1938'}\n\n```{.r .cell-code}\ndf_high <- df %>%\n    filter(highlow == \"高い\") # 文字列は\"\"で囲む\n```\n:::\n\n:::\n<!--\n::: {.callout-tip}\n## MS Excelの場合\nhighlow変数のあるJ列をクリックして枠を移動させ，上の「ホーム」メニューから「並び替えとフィルター」をクリックし，「フィルター」をクリックする。\nすると，変数名highlowのヨコに漏斗のようなマークが出るので，それをクリックすると，記録されたデータの種類が出てくるので，「高い」だけにチェックが入った状態にする。\n::: -->\n\n## データを抽出する `filter`の条件\n\n`filter()`関数の中で指定する条件は，\n\n- `==` : 一致する\n- `!=` : 一致しない\n- `>=`や`<=` : 以上や以下\n- `>`や`<` : より大きいや小さい\n- `%in%` : いずれかに一致する\n\nなどがあります。\n\n## 条件を組み合わせる\n\nまたこれらの条件を組み合わせることもできます。\nその場合は，以下のように`&`や`|`を使います。\n\n- `&` : かつ\n- `|` : または\n\n## データを抽出する `filter`の例\n\nたとえば，資生堂と花王を抽出したり，売上高当期純利益率が5%以上かつ売上高が1000億円以上の企業を抽出するには，\n次のように書きます。\n\n:::{.callout-important}\n## 条件の組み合わせ\n\n資生堂で、利益率が5％以上で、売上高が1000以上の年度を抽出\n\n\n::: {.cell output-location='slide' hash='prezemi_2023_03_presen_cache/revealjs/filter_shiseido_kao_57566f4d17db1025b0bc8ba2fb364c23'}\n\n```{.r .cell-code}\ndf_shiseido <- df %>%\n    filter(\n      name %in% c(\"資生堂\") &\n      ratio >= 0.05 &\n      sales >= 1000000\n      ) # 3つの条件を組み合わせる\nkable(df_shiseido)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> code </th>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:right;\"> shubetsu </th>\n   <th style=\"text-align:right;\"> ren </th>\n   <th style=\"text-align:right;\"> sales </th>\n   <th style=\"text-align:right;\"> netincome </th>\n   <th style=\"text-align:right;\"> month </th>\n   <th style=\"text-align:right;\"> ratio </th>\n   <th style=\"text-align:left;\"> highlow </th>\n   <th style=\"text-align:left;\"> year </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 0000641 </td>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2018/12 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1094825 </td>\n   <td style=\"text-align:right;\"> 61403 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> 0.0560848 </td>\n   <td style=\"text-align:left;\"> 高い </td>\n   <td style=\"text-align:left;\"> 2018 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 0000641 </td>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2019/12 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 1131547 </td>\n   <td style=\"text-align:right;\"> 73562 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> 0.0650101 </td>\n   <td style=\"text-align:left;\"> 高い </td>\n   <td style=\"text-align:left;\"> 2019 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\n\n\n## 変数を選択する `select`\n\nデータから特定の変数を取り出すには`dplyr`パッケージの`select()`関数を使う。\n`df_shiseido`から，企業コード，企業名，利益率の3つの変数だけを選択してみる。\n\n:::{.callout-important}\n## `select()`で変数選択\n\n`name`と`term`と`sales`と`ratio`の4つの変数だけ選択して上書き\n\n\n::: {.cell hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-28_5d445d93643a2cd3cbaf6e05ff81839c'}\n\n```{.r .cell-code}\ndf_shiseido <- df_shiseido %>%\n    select(name, term, sales, ratio) # 3つの変数だけ選択\nkable(df_shiseido)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:right;\"> sales </th>\n   <th style=\"text-align:right;\"> ratio </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2018/12 </td>\n   <td style=\"text-align:right;\"> 1094825 </td>\n   <td style=\"text-align:right;\"> 0.0560848 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2019/12 </td>\n   <td style=\"text-align:right;\"> 1131547 </td>\n   <td style=\"text-align:right;\"> 0.0650101 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\n\n<!-- ::: {.callout-tip}\n## MS Excelの場合\nオリジナルのデータをコピーして，下のタブから別のシートを選択し，そこに貼り付ける。\n\n貼り付けたデータから`code`と`name`と`ratio`以外の列を削除する。\n::: -->\n\n## 変数を選択する `select`の例\n\n`select()`関数の中で使えるものには，以下のようなものがある。\n\n- `-` : 除外する (`-ratio`とかくと`ratio`以外を選択)\n- `:` : 連続する変数を選択 (`code:ren`と書くと`code`から`ren`までを選択)\n- `starts_with()` : ある文字列で始まる変数を選択\n- `ends_with()` : ある文字列で終わる変数を選択\n\n比率を表す変数は`ratio`で始まるように統一しておく，基準化した変数には`_K`を最後に付けておく，とすると選択が簡単\n\n## データを並び替える `arrange`\n\nデータを並び替えるには，`dplyr`パッケージの`arrange()`関数を使います。\n\n:::{.callout-important}\n## Rの場合\n\n::: {.cell output-location='column' hash='prezemi_2023_03_presen_cache/revealjs/unnamed-chunk-29_4bd737a4230af344b539fc01a136e330'}\n\n```{.r .cell-code}\ndf %>%\n  # 2つの変数だけ選択\n  select(name, ratio) %>%\n  arrange(ratio) %>%\n  head() %>%\n  kable() %>%\n  kable_styling(font_size = 20)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 20px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:right;\"> ratio </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:right;\"> -0.4349581 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:right;\"> -0.0757638 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:right;\"> -0.0385906 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:right;\"> -0.0216680 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:right;\"> -0.0138412 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:right;\"> -0.0126617 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\n\n小さい順に並び替えられました。\n\n## 降順に並び替える\n\n降順にするには`desc()`関数を使う。\n\n:::{.callout-important}\n## Rの場合\n\n必要な変数を選択肢、降順に並び替えて、先頭の5行のみを表にした。\n\n\n::: {.cell output-location='column' hash='prezemi_2023_03_presen_cache/revealjs/arrange_desc_c2d69a7282cfd61aa13faff44db4489b'}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\ndf %>%\n  select(name, ratio) %>%\n  arrange(desc(ratio)) %>%\n  head(6) %>% # 先頭の5行\n  kable() %>%\n  kable_styling(font_size = 20)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 20px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:right;\"> ratio </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:right;\"> 0.1110647 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:right;\"> 0.1019213 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:right;\"> 0.0987028 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:right;\"> 0.0986613 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:right;\"> 0.0929384 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:right;\"> 0.0912752 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\nこれでどの企業のどの年度の売上高当期純利益率が大きいのかが一目瞭然\n\n## グループ集計\n\n- `dplyr`の`group_by()`関数を使ってデータをグループ化\n- `dplyr`の`summarise()`関数を使ってグループ集計\n\n\n::: {.cell output-location='slide' hash='prezemi_2023_03_presen_cache/revealjs/group_by_summarise_6d3c8e4bbd659cc1bd69c27a3fbbde00'}\n\n```{.r .cell-code}\ndf |>\n  group_by(name) |> # 企業ごとに以下の計算\n  summarise(\n    mean_sales = mean(sales, na.rm = T), # 平均売上\n    mean_ratio = mean(ratio, na.rm = T) # 平均利益率\n    ) |>\n  kable()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:right;\"> mean_sales </th>\n   <th style=\"text-align:right;\"> mean_ratio </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:right;\"> 182645.0 </td>\n   <td style=\"text-align:right;\"> 0.0209212 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:right;\"> 319402.6 </td>\n   <td style=\"text-align:right;\"> 0.0524618 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:right;\"> 996446.9 </td>\n   <td style=\"text-align:right;\"> 0.0523136 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:right;\"> 649258.8 </td>\n   <td style=\"text-align:right;\"> 0.0243242 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n何行何列の表になるか分かりますか？\n\n## グループ集計：年度別\n\n`group_by()`の引数を2つにすると、2つの変数でグループ化\n\n::: {.panel-tabset}\n\n## 問題\n\n2015年以降の企業別・年度別に平均売上高と平均利益率を計算する。\n\n## 解答\n\n\n::: {.cell output-location='slide' hash='prezemi_2023_03_presen_cache/revealjs/name_term_cb1926313217b51c1319041f26b74699'}\n\n```{.r .cell-code}\ndf |>\n  filter(year >= 2015) |>\n  group_by(name,year) |> # 企業ごとに以下の計算\n  summarise(\n    mean_sales = mean(sales, na.rm = T), # 平均売上\n    mean_ratio = mean(ratio, na.rm = T) # 平均利益率\n    ) |>\n  kable() |> kable_styling(font_size = 8)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 8px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> name </th>\n   <th style=\"text-align:left;\"> year </th>\n   <th style=\"text-align:right;\"> mean_sales </th>\n   <th style=\"text-align:right;\"> mean_ratio </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:left;\"> 2015 </td>\n   <td style=\"text-align:right;\"> 214788.0 </td>\n   <td style=\"text-align:right;\"> 0.0656228 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:left;\"> 2016 </td>\n   <td style=\"text-align:right;\"> 218482.0 </td>\n   <td style=\"text-align:right;\"> 0.0747338 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:left;\"> 2017 </td>\n   <td style=\"text-align:right;\"> 244335.0 </td>\n   <td style=\"text-align:right;\"> 0.1110647 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:left;\"> 2018 </td>\n   <td style=\"text-align:right;\"> 248574.0 </td>\n   <td style=\"text-align:right;\"> 0.0337445 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:left;\"> 2019 </td>\n   <td style=\"text-align:right;\"> 219920.0 </td>\n   <td style=\"text-align:right;\"> 0.0895507 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:left;\"> 2020 </td>\n   <td style=\"text-align:right;\"> 176311.0 </td>\n   <td style=\"text-align:right;\"> 0.0262718 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ポーラ </td>\n   <td style=\"text-align:left;\"> 2021 </td>\n   <td style=\"text-align:right;\"> 178642.0 </td>\n   <td style=\"text-align:right;\"> 0.0656844 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:left;\"> 2015 </td>\n   <td style=\"text-align:right;\"> 738707.0 </td>\n   <td style=\"text-align:right;\"> 0.0548404 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:left;\"> 2016 </td>\n   <td style=\"text-align:right;\"> 604653.0 </td>\n   <td style=\"text-align:right;\"> 0.0776826 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:left;\"> 2017 </td>\n   <td style=\"text-align:right;\"> 641647.0 </td>\n   <td style=\"text-align:right;\"> 0.0822446 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:left;\"> 2018 </td>\n   <td style=\"text-align:right;\"> 688290.0 </td>\n   <td style=\"text-align:right;\"> 0.0891383 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:left;\"> 2019 </td>\n   <td style=\"text-align:right;\"> 714233.0 </td>\n   <td style=\"text-align:right;\"> 0.0645672 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:left;\"> 2020 </td>\n   <td style=\"text-align:right;\"> 727475.0 </td>\n   <td style=\"text-align:right;\"> 0.0719530 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ユニ・チャーム </td>\n   <td style=\"text-align:left;\"> 2021 </td>\n   <td style=\"text-align:right;\"> 782723.0 </td>\n   <td style=\"text-align:right;\"> 0.0929384 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:left;\"> 2015 </td>\n   <td style=\"text-align:right;\"> 1474550.0 </td>\n   <td style=\"text-align:right;\"> 0.0713411 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:left;\"> 2016 </td>\n   <td style=\"text-align:right;\"> 1457610.0 </td>\n   <td style=\"text-align:right;\"> 0.0868209 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:left;\"> 2017 </td>\n   <td style=\"text-align:right;\"> 1489421.0 </td>\n   <td style=\"text-align:right;\"> 0.0987028 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:left;\"> 2018 </td>\n   <td style=\"text-align:right;\"> 1508007.0 </td>\n   <td style=\"text-align:right;\"> 0.1019213 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:left;\"> 2019 </td>\n   <td style=\"text-align:right;\"> 1502241.0 </td>\n   <td style=\"text-align:right;\"> 0.0986613 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:left;\"> 2020 </td>\n   <td style=\"text-align:right;\"> 1381997.0 </td>\n   <td style=\"text-align:right;\"> 0.0912752 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 花王 </td>\n   <td style=\"text-align:left;\"> 2021 </td>\n   <td style=\"text-align:right;\"> 1418768.0 </td>\n   <td style=\"text-align:right;\"> 0.0772755 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2015 </td>\n   <td style=\"text-align:right;\"> 770372.5 </td>\n   <td style=\"text-align:right;\"> 0.0368548 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2016 </td>\n   <td style=\"text-align:right;\"> 850306.0 </td>\n   <td style=\"text-align:right;\"> 0.0377523 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2017 </td>\n   <td style=\"text-align:right;\"> 1005062.0 </td>\n   <td style=\"text-align:right;\"> 0.0226344 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2018 </td>\n   <td style=\"text-align:right;\"> 1094825.0 </td>\n   <td style=\"text-align:right;\"> 0.0560848 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2019 </td>\n   <td style=\"text-align:right;\"> 1131547.0 </td>\n   <td style=\"text-align:right;\"> 0.0650101 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2020 </td>\n   <td style=\"text-align:right;\"> 920888.0 </td>\n   <td style=\"text-align:right;\"> -0.0126617 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 資生堂 </td>\n   <td style=\"text-align:left;\"> 2021 </td>\n   <td style=\"text-align:right;\"> 1035165.0 </td>\n   <td style=\"text-align:right;\"> 0.0409973 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n\n\n<!--\nMS Excelだと，\n\n::: {.callout-tip}\n## MS Excelの場合\n\n「ホーム」メニューから「並び替えとフィルター」をクリックし，「昇順」をクリックする。\n\n必要なデータだけ選択してコピペすれば，表が完成します。\n::: -->\n\n<!-- となります。 -->\n<!-- 簡単ですが，MS Excelの並び替えは注意が必要で，並び替えた後にデータを追加すると，並び替えが解除されてしまい，元に戻せなくなったり，空列があると並び替えがうまくいかなかったりします。 -->\n\n## long形式とwide形式\n\n人間には読みやすいけれどパソコンは読みにくい，というデータの形式がある。\n\n| 地点 |   6時    |   12時   |   18時   |\n|:----:|:--------:|:--------:|:--------:|\n| 札幌 | 12℃  | 15℃  | 13℃  |\n| 大阪 | 20℃  |  24℃  |  22℃  |\n| 福岡 |  23℃  | 25℃  | 25℃  |\n\nこのような形のデータを**ワイド形式**(wide)といい，人間には見やすいが，コンピュータにとっては読みにくい形式\n\n## long形式とwide形式\n\nプログラミングで使うのは**ロング形式**(long)のデータ\n\n| 地点  | 時間  |  気温(℃) |\n|:----:|:----:|:-------:|\n| 札幌  | 6時   |   12    |\n| 札幌  | 12時  |   15    |\n| 札幌  | 18時  |   13    |\n| 大阪  | 6時   |   20    |\n| 大阪  | 12時  |   24    |\n| 大阪  | 18時  |   22    |\n| 福岡  | 6時   |   23    |\n| 福岡  | 12時  |   25    |\n| 福岡  | 18時  |   25    |\n\n\n## 整然データ\n\n- このロング型のうち，一定のルールに従って作成されたデータを**整然データ(tidy data)**といい，扱うデータが整然データとなるように処理することを目指す。\n- R神Hadley Wickham氏は，データの型を理解することを，データ分析の第一歩とし，その一貫として整然データという考え方を提唱しています。\n- 整然データとは，次のような原則に従って構築されたデータのことです(Wickham, 2014) 参考[https://id.fnshr.info/2017/01/09/tidy-data-intro/](https://id.fnshr.info/2017/01/09/tidy-data-intro/)。\n\n## 整然データのルール\n\n1.  個々の変数 (variable) が1つの列 (column) をなす。\n2.  個々の観測 (observation) が1つの行 (row) をなす。\n3.  個々の観測の構成単位の類型 (type of observational unit) が1つの表 (table) をなす。\n4.  個々の値 (value) が1つのセル (cell) をなす\n\n## 整然データの例\n\n<!-- 上の表は，地点，時間，天気，気温の4つの変数があり1つの列をつくっています(ルール1)。 大阪12時の天気は雨，気温は12℃といったように1つの行が1つの観測を表しています(ルール2)。 このデータには種類の異なる観測はない(ルール3)。 また，各セルには1つの値が入っています(ルール4)。 よって，これが整然データとなります。 -->\n\nロング型の天気データを使って，ロングからワイド，ワイドからロングの操作を学びましょう。\n\nまずデータを作ります。\n\n::: {.cell output-location='slide' hash='prezemi_2023_03_presen_cache/revealjs/long_weather_4b114f912bd5ed18ff371849688ec421'}\n\n```{.r .cell-code}\ndf_weather <- data.frame(\n    place = c(rep(\"札幌\",3), rep(\"大阪\",3), rep(\"福岡\",3)),\n    time = rep(c(\"6時\", \"12時\", \"18時\"),3),\n    temp = c(12,15,13,20,24,22,23,25,25)\n)\nkable(df_weather) |> kable_styling(font_size = 24)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 24px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> place </th>\n   <th style=\"text-align:left;\"> time </th>\n   <th style=\"text-align:right;\"> temp </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 札幌 </td>\n   <td style=\"text-align:left;\"> 6時 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 札幌 </td>\n   <td style=\"text-align:left;\"> 12時 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 札幌 </td>\n   <td style=\"text-align:left;\"> 18時 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 大阪 </td>\n   <td style=\"text-align:left;\"> 6時 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 大阪 </td>\n   <td style=\"text-align:left;\"> 12時 </td>\n   <td style=\"text-align:right;\"> 24 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 大阪 </td>\n   <td style=\"text-align:left;\"> 18時 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 福岡 </td>\n   <td style=\"text-align:left;\"> 6時 </td>\n   <td style=\"text-align:right;\"> 23 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 福岡 </td>\n   <td style=\"text-align:left;\"> 12時 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 福岡 </td>\n   <td style=\"text-align:left;\"> 18時 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nこれはロング型の整然データとなる。\n\n## ロングからワイド `pivot_wider`\n\n- Rで使うならこのままでよいのですが，あえてこれをワイド型に変えてみる。\n- 教科書で使用されている`spread()`は「**根本的に設計ミスってた**」と公式で発表\n- そこでR神が作った`pivot_wider()`が推奨\n\n`pivot_wider()`はロング型をワイド型にする関数\n\n## ロングからワイド `pivot_wider`\n\n`pivot_wider()`の主な引数は，`names_from`と`values_from`の2つ\n\n- `names_from`は，ワイド型にするときに，**どの変数を列にするか**を指定\n- `values_from`は，ワイド型にするときに，**どの変数の値を使うか**を指定\n\n## `pivot_wider`実践\n\n以下では，`time`変数の値を列に，`temp`変数の値を値にして，`df_wide`という変数に代入\n\n\n::: {.cell output-location='slide' hash='prezemi_2023_03_presen_cache/revealjs/pivot_wider2_61435519ae4d7413109261555d176a19'}\n\n```{.r .cell-code}\ndf_wide <- df_weather |>\n    pivot_wider(\n      names_from = time,\n      values_from = temp\n      )\nkable(df_wide)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> place </th>\n   <th style=\"text-align:right;\"> 6時 </th>\n   <th style=\"text-align:right;\"> 12時 </th>\n   <th style=\"text-align:right;\"> 18時 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 札幌 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 大阪 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 福岡 </td>\n   <td style=\"text-align:right;\"> 23 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\nこれでワイド型に変換\n\n## ワイドからロング `pivot_longer`\n\n次に，このワイド型のデータをロング型に変換するため、R神による`pivot_longer()`を使用\n\n`pivot_longer()`の引数は，`cols`と`names_to`と`values_to`です。\n\n- `cols`は，ロング型に変換するときに，どの変数を行にするかを指定\n- `names_to`は，ロング型に変換するときに，どの変数の値を使うかを指定\n- `values_to`は，ロング型に変換するときに，どの変数の値を使うかを指定\n\n## ワイドからロング `pivot_longer`\n\n以下のコードでは，`6時`，`12時`，`18時`の3つの変数を行に，`time`という変数の値を列に，`temp`という変数の値を値にして，`df_long`という変数に代入\n\n\n::: {.cell output-location='slide' hash='prezemi_2023_03_presen_cache/revealjs/pivot_longer2_fde3e17d2b46083967c195b0323f35af'}\n\n```{.r .cell-code}\ndf_long <- df_wide |>\n    pivot_longer(\n        cols = c(\"6時\", \"12時\", \"18時\"), # 縦にする変数\n        names_to = \"time\", # 縦にした変数名\n        values_to = \"temp\") # 値\nkable(df_long) |> kable_styling(font_size = 24)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 24px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> place </th>\n   <th style=\"text-align:left;\"> time </th>\n   <th style=\"text-align:right;\"> temp </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> 札幌 </td>\n   <td style=\"text-align:left;\"> 6時 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 札幌 </td>\n   <td style=\"text-align:left;\"> 12時 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 札幌 </td>\n   <td style=\"text-align:left;\"> 18時 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 大阪 </td>\n   <td style=\"text-align:left;\"> 6時 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 大阪 </td>\n   <td style=\"text-align:left;\"> 12時 </td>\n   <td style=\"text-align:right;\"> 24 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 大阪 </td>\n   <td style=\"text-align:left;\"> 18時 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 福岡 </td>\n   <td style=\"text-align:left;\"> 6時 </td>\n   <td style=\"text-align:right;\"> 23 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 福岡 </td>\n   <td style=\"text-align:left;\"> 12時 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> 福岡 </td>\n   <td style=\"text-align:left;\"> 18時 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n元のロング型に戻りました。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}